{"version":3,"sources":["schema/Queries.js","Store.js","components/Login.js","schema/Mutation.js","components/DealDelete.js","components/CheckBox.js","components/Deal.js","components/Header.js","components/CreateTabs.js","components/Main.js","components/CreatePayPerson.js","components/ConnectPayPerson.js","components/ModifyPayPerson.js","App.js","index.js"],"names":["Login_Query","gql","_templateObject","isDeliverList","_templateObject2","isAllPayList","_templateObject3","notBothList","_templateObject4","payPerson_List","_templateObject5","Store","React","createContext","MainTabStore","ModifyTabStore","CreateBankInfo","CreatePayPersonInfo","ModifyDealID","ConnectPayPersonID","varyIsAllPayInfo","optimalRequest","useStyles","makeStyles","theme","container","display","flexWrap","textField","marginLeft","spacing","marginRight","width","dense","marginTop","menu","Login","_useState","useState","_useState2","Object","slicedToArray","count","setCount","_useState3","_useState4","password","setPassword","_useState5","_useState6","challenge","setChallenge","_useState7","_useState8","isOpen","setIsOpen","_useQuery","useQuery","data","error","loading","_useContext","useContext","_useContext2","setChoose","classes","react_default","a","createElement","message","Fragment","admins","Typography","variant","align","gutterBottom","Grid","justify","alignItems","alignContent","TextField","id","label","className","type","autoComplete","margin","onKeyPress","e","key","onChange","target","value","Button","onClick","_compare","Remove_Deal","Mutation_templateObject","ChangeTrueIsDeliver","Mutation_templateObject2","ChangeFalseIsDeliver","Mutation_templateObject3","ChangeFalseIsAllPay","Mutation_templateObject4","CreatePayPerson_Mutation","Mutation_templateObject5","UpdateIsAllPay","_templateObject6","DealDelete","_ref","ID","deleteDeal","useMutation","optimunReq","setOptimunReq","console","log","style","fontWeight","fontSize","variables","CheckBox","isDeliver","varyIsAllPay","setVaryAllPay","value1","value2","checkBox","setCheckBox","originalState","_useContext3","_useContext4","setDealID","_useContext5","setAppChoose","_useContext7","_useContext8","optimalReq","setOptimalReq","changeTrueDeliver","changeFalseDeliver","changeFalseAllPay","_ChangeState","_unCheckBox","obj","document","getElementsByName","i","length","checked","Box","name","objectSpread","checkBoxList","Deal","props","p","m","backgroundColor","grey","components_DealDelete","_textDealList","isAllPay","Provider","components_CheckBox","createTableRow","par1","par2","par3","TableRow","TableCell","createdAt","address","userName","userPhonNumber","Table","TableBody","productName","productNum","productCost","bank","payPerson","Header","AppBar","position","Toolbar","CreateTabs","array","fx","choose","Tabs","event","newValue","indicatorColor","textColor","map","ele","index","Tab","Main","_PaperQuery","Query_name","react_apollo_esm","query","pollInterval","startPolling","stopPolling","deals","GridList","record","components_Deal","user","product","components_Header","components_CreateTabs","window","open","_TextField","info","setInfo","required","CreatePayPerson","setBank","setName","state","func","ConnectPayPerson","payPersons","PayPersonList","ModifyPayPerson","connectPayPerson","setConnectPayPerson","setOriginState","_useContext6","DealID","createPayPerson","updateIsAllPay","Paper","components_CreatePayPerson","components_ConnectPayPerson","then","result","PayPerson","App","components_Login","components_Main","components_ModifyPayPerson","client","ApolloClient","uri","ReactDOM","render","ApolloContext","src_App","getElementById"],"mappings":"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","file":"static/js/main.9a2d87c1.chunk.js","sourcesContent":["import gql from 'graphql-tag';\r\n\r\nexport const Login_Query = gql`\r\n    {\r\n        admins(where :{ID:\"cjwvv0qkw002c07319s4qrvre\"}){\r\n            ID\r\n            password\r\n        }\r\n    }\r\n`; \r\nexport const isDeliverList=gql`\r\n     {\r\n        deals(where:{isDeliver: false},orderBy:address_DESC){\r\n        ID\r\n        createdAt\r\n        address\r\n    \t\tproduct{\r\n          productName\r\n        }\r\n        productNum\r\n        productCost\r\n        isDeliver\r\n        payPerson{\r\n          payPerson\r\n          isAllPay\r\n          bank\r\n        }\r\n        user{\r\n          userName\r\n          userPhonNumber\r\n        }        \r\n    }\r\n  \r\n  }\r\n`;\r\nexport const isAllPayList=gql`\r\n    {\r\n        deals(where:{payPerson:{isAllPay:false}},orderBy:address_DESC){\r\n          ID\r\n        createdAt\r\n        address\r\n    \t\tproduct{\r\n          productName\r\n        }\r\n        productNum\r\n        productCost\r\n        \r\n        isDeliver\r\n        payPerson{\r\n          payPerson\r\n          isAllPay\r\n          bank\r\n        }\r\n        user{\r\n          userName\r\n          userPhonNumber\r\n      }          \r\n    }\r\n    }\r\n\r\n`;\r\nexport const notBothList=gql`\r\n    {\r\n        deals(where: {AND:[{ isDeliver: true },{payPerson:{isAllPay:true}}]},orderBy:address_DESC){\r\n          ID\r\n        createdAt\r\n        address\r\n    \t\tproduct{\r\n          productName\r\n        }\r\n        productNum\r\n        productCost\r\n        \r\n        isDeliver\r\n        payPerson{\r\n          payPerson\r\n          isAllPay\r\n          bank\r\n        }\r\n        user{\r\n          userName\r\n          userPhonNumber\r\n      }          \r\n    }\r\n    }\r\n\r\n`;\r\nexport const  payPerson_List =gql`\r\n  {\r\n    payPersons \r\n    {\r\n      ID\r\n      bank\r\n      payPerson\r\n    }\r\n  }\r\n\r\n\r\n`","import React from \"react\";\r\n\r\nexport const Store = React.createContext([0,()=>{}]);\r\n\r\nexport const checkBoxStore = React.createContext([true,()=>{}]);\r\n\r\nexport const MainTabStore =React.createContext([0,()=>{}]);\r\n\r\nexport const ModifyTabStore =React.createContext([0,()=>{}]);\r\n\r\n\r\nexport const CreateBankInfo=React.createContext([\"\",()=>{}]);\r\n\r\nexport const CreatePayPersonInfo=React.createContext([\"\",()=>{}]);\r\n\r\nexport const ModifyDealID=React.createContext([\"\",()=>{}]);\r\n\r\n\r\nexport const ConnectPayPersonID=React.createContext([\"\",()=>{}]);\r\n\r\nexport const varyIsAllPayInfo = React.createContext([false,()=>{}]);\r\n\r\n\r\nexport const optimalRequest= React.createContext([1,()=>{}]);","import React,{useState, useContext} from \"react\";\r\n\r\nimport { useQuery } from 'react-apollo-hooks';\r\nimport {Login_Query} from \"../schema/Queries\";\r\nimport {Typography,Button,Grid,TextField} from '@material-ui/core/';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Store} from \"../Store\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 200,\r\n  },\r\n  dense: {\r\n    marginTop: 19,\r\n  },\r\n  menu: {\r\n    width: 200,\r\n  },\r\n  \r\n}));\r\n\r\n\r\nconst Login=()=>{ \r\n    const [count,setCount]= useState(0);\r\n    const [password,setPassword]= useState(\"\");\r\n    const [challenge,setChallenge]=useState(\"\");\r\n    const [isOpen,setIsOpen]=useState(false);\r\n    const { data, error, loading } = useQuery(Login_Query);\r\n    const [choose,setChoose]= useContext(Store)\r\n    const _compare=()=>{\r\n    if(isOpen) setChoose(1)\r\n    else if(count !=1) return<h3>Login failed</h3>  \r\n    }\r\n    const _passwordTextField=()=>{\r\n        return <div>\r\n          <TextField\r\n              id=\"standard-password-input\"\r\n              label=\"비밀번호\"\r\n              className={classes.textField}\r\n              type=\"password\"\r\n              autoComplete=\"current-password\"\r\n              margin=\"normal\"\r\n              onKeyPress={(e) =>{\r\n              if (e.key === \"Enter\"&&password==challenge)setIsOpen(true)\r\n              else if(e.key===\"Enter\"){\r\n                setIsOpen(false);\r\n                setCount(count+1);}}}\r\n              onChange={(e)=>{setChallenge(e.target.value)}}\r\n            />\r\n          </div>    \r\n    }\r\n    const classes = useStyles();\r\n    const _HeaderText=()=>{\r\n      return <div>\r\n      <Typography variant=\"h2\"align =\"center\" gutterBottom>\r\n      Login\r\n    </Typography><br/>\r\n    </div>\r\n    }\r\n    const _loginButton=()=>{\r\n      return <div>\r\n        <Button onClick={(e)=>{\r\n                    if(password == challenge){setIsOpen(true); }\r\n                    else{setIsOpen(false);}\r\n                    setCount(count+1);}}>로그인\r\n          </Button>\r\n      </div>\r\n    }\r\n    if (loading) return <h2>Loading...</h2>;\r\n\r\n    if (error) return <div>Error! {error.message}</div>;\r\n    return (\r\n      <React.Fragment>\r\n          {count==0&&(setPassword(data.admins[0].password),setCount(count+1))}   \r\n            {_HeaderText()}\r\n            <Grid container justify=\"center\" alignItems=\"center\" alignContent=\"center\" > \r\n              {_passwordTextField()}\r\n              {_loginButton()}\r\n              </Grid>\r\n              <Grid container justify=\"center\" alignItems=\"center\" alignContent=\"center\" >        \r\n              {_compare()}\r\n              </Grid > \r\n              \r\n        </React.Fragment>\r\n    );\r\n    \r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport default Login;\r\n\r\n\r\n\r\n\r\n\r\n","import gql from 'graphql-tag';\r\n\r\n\r\nexport const Remove_Deal = gql`\r\nmutation removeDeal($ID: ID!){\r\n    deleteDeal(where:{ID:$ID}){\r\n        createdAt\r\n    }\r\n\r\n}\r\n\r\n`;\r\n\r\n\r\nexport const ChangeTrueIsDeliver=gql`\r\nmutation changeTrueIsDeliver($ID:ID!){\r\n    updateDeal(data:{isDeliver: true},where:{ID: $ID}){\r\n        createdAt\r\n    }\r\n}\r\n`;\r\nexport const ChangeFalseIsDeliver=gql`\r\nmutation changeFalseIsDeliver($ID:ID!){\r\n    updateDeal(data:{isDeliver: false},where:{ID: $ID}){\r\n        createdAt\r\n    }\r\n}\r\n`;\r\n\r\n\r\n\r\nexport const ChangeFalseIsAllPay=gql`\r\nmutation changeFalseIsAllPay($ID:ID!){\r\n    updateDeal(where: {ID: $ID}, data: {payPerson: {connect: {ID: \"cjwvv0ya0002n07317wbytqy2\"}}}) {\r\n    createdAt\r\n  }\r\n}\r\n\r\n`;\r\n\r\nexport const CreatePayPerson_Mutation= gql`\r\nmutation createPayPerson($bank: String!, $payPerson: String!){\r\n  createPayPerson(data: {bank: $bank, payPerson: $payPerson}){\r\n    ID\r\n  }\r\n}\r\n`\r\n\r\nexport const UpdateIsAllPay=gql`\r\nmutation UpdateIsAllPay($PayPerson: ID!,$Deal: ID!){\r\n  updateDeal(data: {payPerson: {connect: {ID: $PayPerson}}}, where: {ID: $Deal}){\r\n    createdAt\r\n  }\r\n}\r\n`;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React,{useContext} from \"react\";\r\nimport {Remove_Deal} from \"../schema/Mutation\";\r\nimport { useMutation } from 'react-apollo-hooks';\r\n\r\nimport {Button} from '@material-ui/core/';\r\nimport {optimalRequest} from \"../Store\";\r\n\r\nconst DealDelete=({ID})=>{\r\n\r\nconst deleteDeal = useMutation(Remove_Deal);\r\nconst [optimunReq,setOptimunReq]= useContext(optimalRequest);\r\nreturn(\r\n    <React.Fragment>\r\n        {optimunReq==0&&setOptimunReq(1)}\r\n        {console.log(\"삭제버튼에서 이거는?\"+optimunReq)}\r\n        <Button   style={{fontWeight:\"bold\",fontSize:'20px'}}onClick= {(e)=>{deleteDeal({variables:{ID:ID}})}}> 삭제</Button>\r\n    </React.Fragment>\r\n)\r\n}\r\n\r\n\r\nexport default DealDelete;","import React,{useState,useContext} from \"react\";\r\nimport {useMutation} from \"react-apollo-hooks\";\r\nimport {ChangeTrueIsDeliver} from \"../schema/Mutation\";\r\nimport {ChangeFalseIsDeliver} from \"../schema/Mutation\";\r\nimport {ChangeFalseIsAllPay} from \"../schema/Mutation\";\r\nimport {Grid,Button,Box} from '@material-ui/core/';\r\nimport {Store,ModifyDealID,varyIsAllPayInfo,optimalRequest} from \"../Store\"; \r\n\r\n function CheckBox({isDeliver,ID}){\r\n    const [varyIsAllPay,setVaryAllPay]= useContext(varyIsAllPayInfo)\r\n\r\n\r\n    const [checkBox,setCheckBox]= useState({\r\n        value1:isDeliver,\r\n        value2:varyIsAllPay,\r\n    });\r\n    const [originalState,setOrigin] = useState(varyIsAllPay);\r\n    //context\r\n    const [DealID,setDealID]= useContext(ModifyDealID);\r\n    const [,setAppChoose]=useContext(Store)\r\n    const [optimalReq,setOptimalReq]= useContext(optimalRequest);\r\n    \r\n    \r\n    //쿼리\r\n    const changeTrueDeliver= useMutation(ChangeTrueIsDeliver)\r\n    const changeFalseDeliver = useMutation(ChangeFalseIsDeliver)\r\n    const changeFalseAllPay = useMutation(ChangeFalseIsAllPay)\r\n    \r\n\r\n\r\n    const _ChangeState=()=>{\r\n       if(!checkBox.value1) changeFalseDeliver({variables:{ID:ID}})\r\n       else changeTrueDeliver({variables:{ID:ID}})\r\n        if(originalState==checkBox.value2);\r\n       else if(originalState&&!checkBox.value2){setVaryAllPay(false);changeFalseAllPay({variables:{ID:ID}})}\r\n        else {setDealID(ID);setAppChoose(2)}\r\n       {optimalReq==0&&setOptimalReq(1)} \r\n    }  \r\n    const checkBoxList=() =>{\r\n        const _unCheckBox =()=>{\r\n            let obj = document.getElementsByName(\"checkbox1\");\r\n            for(let i=0;i<obj.length;i++)\r\n                if(obj[i].checked=true)obj[i].checked=false;         \r\n        }\r\n        function onClick (){\r\n            _ChangeState();\r\n            _unCheckBox()\r\n            \r\n        }\r\n      \r\n        return <Grid container justify=\"center\">\r\n                    <Box container =\"span\">\r\n                    배달반전<input type=\"checkbox\" name=\"checkbox1\" value=\"배달\" onChange={() => { setCheckBox({ ...checkBox, value1: !checkBox.value1 }); }} />\r\n                    결제반전<input type=\"checkbox\" name=\"checkbox1\" value=\"결제\" onChange={() => { \r\n                        setCheckBox({ ...checkBox, value2: !checkBox.value2 });\r\n                    }} />\r\n                    <Button style={{ fontWeight: \"bold\" }} onClick={onClick}>저장</Button>\r\n                    </Box>\r\n                </Grid>;\r\n    }\r\n    \r\n    return(\r\n        <React.Fragment>\r\n        \r\n        {console.log(\"원상태\"+originalState+\" 반전?\"+checkBox.value2)}\r\n        \r\n        {checkBoxList()}\r\n        </React.Fragment>\r\n    )\r\n\r\n\r\n\r\n\r\n}\r\n    \r\n    \r\n\r\n\r\n\r\n\r\n\r\nexport default CheckBox;\r\n\r\n\r\n\r\n","import React,{useContext} from \"react\";\r\nimport DealDelete from \"./DealDelete\";\r\nimport CheckBox from \"./CheckBox\";\r\nimport {Typography,Grid,Table,TableRow,TableCell,TableBody,Box} from '@material-ui/core/';\r\n\r\nimport grey from '@material-ui/core/colors/grey';\r\nimport {varyIsAllPayInfo} from '../Store';\r\n\r\n\r\n\r\n\r\n\r\nfunction Deal(props){\r\n    const [varyIsAllPay,setVaryAllPay]= useContext(varyIsAllPayInfo);\r\n    return(\r\n        <React.Fragment>\r\n            <Box container ={props.ID} p={2} m={1}style={{backgroundColor:grey[50]}}>\r\n                <Grid container  justify=\"flex-end\"><DealDelete ID={props.ID} /></Grid>\r\n                <Grid container justify =\"center\">\r\n                    {_textDealList(props)}\r\n                    {props.isAllPay!=varyIsAllPay&&setVaryAllPay(props.isAllPay)}\r\n                    {props.isAllPay==varyIsAllPay&&<varyIsAllPayInfo.Provider value ={[varyIsAllPay,setVaryAllPay]}>               \r\n                    <CheckBox isDeliver={props.isDeliver} ID={props.ID}/>            \r\n                    </varyIsAllPayInfo.Provider>\r\n                    }\r\n                </Grid>\r\n            </Box>\r\n     </React.Fragment>\r\n    )    \r\n}\r\n\r\nexport default Deal;\r\n\r\nconst _textDealList=(props)=>{\r\n    const createTableRow=(par1,par2,par3)=> {\r\n        return <TableRow>\r\n            <TableCell align=\"center\">{par1}</TableCell>\r\n            <TableCell align=\"center\">{par2}</TableCell>\r\n            <TableCell align=\"center\">{par3}</TableCell>\r\n        </TableRow>;\r\n    }\r\n    const _TableBody=()=>{\r\n        return<TableBody>\r\n                    {createTableRow(\"제품\",\"수량\",\"가격\")}\r\n                    {createTableRow(props.productName,props.productNum,props.productCost)}\r\n                    {createTableRow(\"청구금액\",\" \",props.productCost)}                        \r\n                    {createTableRow(\"결제자\",props.bank==\"미정\"||props.bank==\"직거래\"? props.bank:props.bank+\"은행\",props.payPerson)}                        \r\n                </TableBody>\r\n    }\r\n    \r\n\r\n    const _priceList=()=> {\r\n        return<Table>\r\n                {_TableBody()}\r\n            </Table>        \r\n    }\r\n    \r\n\r\n    return <Grid >\r\n        <Typography variant=\"body1\" align='center' gutterBottom>\r\n            기간:{props.createdAt}\r\n        </Typography>\r\n        <Typography variant=\"body1\" align= 'center' gutterBottom>\r\n            주소:{props.address}\r\n        </Typography>\r\n        <Typography variant=\"body1\" align='center' gutterBottom>\r\n            구매자:{props.userName}/{props.userPhonNumber}\r\n        </Typography>\r\n        {_priceList()}\r\n        <Typography variant=\"body1\"align='center' gutterBottom>\r\n            배달현황: {props.isDeliver || false ? \"o\" : \"x\"}&nbsp; 결제현황: {props.isAllPay || false ? \"o\" : \"x\"}\r\n        </Typography>\r\n    </Grid>;\r\n\r\n\r\n    \r\n}\r\n\r\n","import React from \"react\"\r\nimport {AppBar,Toolbar,Typography} from '@material-ui/core';\r\n\r\n\r\nconst Header=({name})=>{\r\n               \r\n    return (\r\n     <React.Fragment>   \r\n      <AppBar position=\"static\">\r\n          <Toolbar>\r\n              <Typography variant=\"h5\" gutterBottom>{name}</Typography>\r\n          </Toolbar>\r\n      </AppBar>   \r\n      </React.Fragment>\r\n      \r\n      )\r\n \r\n}\r\nexport default Header;","import React, { useContext } from \"react\"\r\nimport {Tabs,Tab} from '@material-ui/core/';\r\n\r\n\r\n\r\nconst CreateTabs=({array,fx})=>{\r\n    const handleChange=(event, newValue) =>{\r\n        setChoose(newValue);\r\n    }   \r\n    const [choose,setChoose]= useContext(fx);\r\n    \r\n    return<Tabs\r\n            value={choose}\r\n            onChange={handleChange}\r\n            indicatorColor=\"primary\"\r\n            textColor=\"primary\"\r\n            variant=\"fullWidth\"\r\n            >\r\n            {array.map((ele,index)=>(<Tab key={index} label= {\"\"+ele}/>))}\r\n\r\n\r\n        </Tabs>\r\n          \r\n  }\r\n\r\n  export default CreateTabs;","import React,{useState,useEffect} from \"react\";\r\nimport Deal from \"./Deal\";\r\nimport {notBothList,isAllPayList,isDeliverList} from \"../schema/Queries\";\r\nimport {GridList} from '@material-ui/core';\r\nimport {MainTabStore} from \"../Store\";\r\nimport Header from \"./Header\";\r\nimport CreateTabs from \"./CreateTabs\";\r\nimport { Query } from 'react-apollo';\r\n\r\n\r\n\r\n  \r\n\r\nfunction Main(){\r\n    const [isEmpty,setEmpty]=useState(false);\r\n    const [choose,setChoose]=useState(0);\r\n    const _PaperQuery=(Query_name)=>{\r\n       return <Query query= {Query_name} pollInterval={1}> \r\n        {\r\n            ({loading,data,error,startPolling,stopPolling})=> \r\n                   {   \r\n                       if(loading) return <h2>Loading..</h2>\r\n                       if(error) return  <h2>에러</h2>\r\n                       if(data.deals.length==0) return <h2>없음</h2> \r\n                       return(\r\n                           <GridList>\r\n                               {\r\n                                   data.deals.map((record)=>(\r\n                                       <Deal key={record.ID} ID={record.ID} createdAt={record.createdAt} address={record.address} userName={record.user.userName} userPhonNumber={record.user.userPhonNumber} payPerson={record.payPerson.payPerson} productName={record.product.productName} productNum={record.productNum} productCost={record.productCost} isAllPay={record.payPerson.isAllPay} isDeliver={record.isDeliver} bank={record.payPerson.bank} />\r\n                                   ))\r\n                               }\r\n                           </GridList>\r\n                       );\r\n                    }\r\n        }</Query>\r\n    }\r\n        \r\n        \r\n    \r\n    const _controller=()=>{\r\n        if(choose ==3) window.open(\"https://db-layer-de1a8af52f.herokuapp.com/data-layer/dev/_admin\",'_blank')\r\n        if(choose==0){return  _PaperQuery(isDeliverList)};\r\n        if(choose==1){return  _PaperQuery(isAllPayList)};\r\n        if(choose==2){return _PaperQuery(notBothList)};   \r\n    }\r\n        \r\n   \r\n\r\n    return(    \r\n        <React.Fragment>\r\n            <Header name={\"맞춤거래기록부\"}/>\r\n            <MainTabStore.Provider  value ={[choose,setChoose] }>\r\n                <CreateTabs array={[\"미배달\",\"미결제\",\"완료\",\"추가\"]} fx={MainTabStore}/>\r\n            </MainTabStore.Provider >\r\n            {_controller()}        \r\n        </React.Fragment>\r\n        );\r\n    \r\n    \r\n}\r\n\r\nexport default Main;\r\n\r\n\r\n","import React,{ useContext} from \"react\";\r\nimport {TextField,Grid} from '@material-ui/core';\r\nimport {CreateBankInfo,CreatePayPersonInfo} from \"../Store\"\r\n\r\nfunction CreatePayPerson(){\r\n    const [bank,setBank]=useContext(CreateBankInfo);\r\n    const [name,setName]=useContext(CreatePayPersonInfo);\r\n  return (\r\n    <React.Fragment>  \r\n         {_TextField(\"은행\",bank,setBank)}\r\n         {_TextField(\"입금자명\",name,setName)}\r\n    </React.Fragment>\r\n        \r\n    )    \r\n\r\n}\r\n\r\nconst _TextField=(name,info,setInfo)=>{\r\n    return<Grid container justify=\"center\" alignItems=\"center\" alignContent=\"center\">\r\n      <TextField\r\n      required\r\n      id=\"standard-required2\"\r\n      label={name}\r\n      margin=\"normal\"\r\n      onChange={(e)=>{setInfo(e.target.value )}}\r\n    /> \r\n    </Grid> \r\n\r\n}\r\n\r\n\r\n\r\nexport default CreatePayPerson;","import React, {useContext } from \"react\";\r\n\r\n\r\nimport {useQuery} from \"react-apollo-hooks\";\r\nimport {payPerson_List} from \"../schema/Queries\";\r\nimport {Table,TableRow,TableCell, TableBody} from \"@material-ui/core\"\r\nimport{ConnectPayPersonID} from \"../Store\"\r\n\r\nfunction ConnectPayPerson (){\r\n    const [choose,setChoose]= useContext(ConnectPayPersonID);\r\n    \r\n    return (\r\n        <React.Fragment>\r\n        {PayPersonList(choose,setChoose)}\r\n        {console.log(choose)}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nfunction PayPersonList(choose,setChoose){\r\n    \r\n    const {data,loading,error}= useQuery(payPerson_List);\r\n    \r\n    if(loading)return <h2>Loading</h2>\r\n\r\n    if(data) {\r\n    return<Table>\r\n    <TableBody>\r\n    {\r\n        data.payPersons.map((payPerson)=>{\r\n        return createTableRow (payPerson.ID,payPerson.bank==\"미정\"||payPerson.bank==\"직거래\"?payPerson.bank:payPerson.bank+\"은행\",payPerson.payPerson,choose,setChoose) \r\n        \r\n    })\r\n    }\r\n    </TableBody>\r\n    </Table>\r\n    }\r\n\r\n\r\n}\r\n\r\n    \r\n\r\n\r\n\r\nconst createTableRow=(index,par1,par2,state,func) =>{\r\n    return <TableRow key ={index}>\r\n        <TableCell align=\"center\"><input type=\"radio\"name =\"one\" onChange={()=>func(index)}/></TableCell>\r\n        <TableCell align=\"center\">{par1}</TableCell>\r\n        <TableCell align=\"center\">{par2}</TableCell>\r\n    </TableRow>;\r\n}\r\n\r\nexport default ConnectPayPerson;","import React, { useState, useContext } from \"react\";\r\nimport Header from \"./Header\";\r\nimport CreateTabs from \"./CreateTabs\";\r\nimport {ModifyTabStore} from \"../Store\"\r\nimport CreatePayPerson from \"./CreatePayPerson\";\r\nimport {Grid,Paper,Button} from '@material-ui/core'\r\nimport {Store,CreateBankInfo,CreatePayPersonInfo,ModifyDealID,ConnectPayPersonID,varyIsAllPayInfo} from \"../Store\"\r\nimport {useMutation} from \"react-apollo-hooks\";\r\nimport {CreatePayPerson_Mutation,UpdateIsAllPay} from \"../schema/Mutation\";\r\nimport ConnectPayPerson from \"./ConnectPayPerson\";\r\n\r\n\r\n\r\nfunction  ModifyPayPerson(){\r\n    const [choose,setChoose]=useState(0);\r\n    const [name,setName]= useState(\"\");  \r\n    const [bank,setBank]= useState(\"\");  \r\n    const [connectPayPerson,setConnectPayPerson]=useState(\"\");\r\n    \r\n    const [,setOriginState]= useContext(varyIsAllPayInfo)\r\n    const [appChoose,setAppChoose]= useContext(Store)\r\n    const [DealID,setDealID]= useContext(ModifyDealID);\r\n     \r\n    \r\n    \r\n    const createPayPerson=useMutation(CreatePayPerson_Mutation);\r\n    const updateIsAllPay= useMutation(UpdateIsAllPay);\r\n\r\n\r\n    function _controller(){\r\n        if(choose==0)\r\n         return <CreateBankInfo.Provider value={[bank,setBank]} >\r\n             <CreatePayPersonInfo.Provider value ={[name,setName]}>\r\n             <CreatePayPerson/>\r\n             </CreatePayPersonInfo.Provider>\r\n             </CreateBankInfo.Provider>\r\n        if(choose==1) //연결\r\n        return <ConnectPayPerson/>\r\n    } \r\n    function _saveClick(){\r\n        if(choose==0){  \r\n            let ID=createPayPerson({variables:{bank:bank,payPerson:name}})\r\n            ID.then(function(result){\r\n                updateIsAllPay({variables:{PayPerson:result.data.createPayPerson.ID,Deal:DealID}})//만든 결제자 ID\r\n            })               \r\n        }\r\n        if(choose==1) {\r\n            updateIsAllPay({variables:{PayPerson:connectPayPerson,Deal:DealID}})\r\n        }\r\n\r\n        return setOriginState(true)\r\n\r\n    }\r\n    return (\r\n    <React.Fragment>\r\n    <Header name ={\"결제자수정\"}/>\r\n    <ModifyTabStore.Provider value ={[choose,setChoose]}>\r\n    <CreateTabs array={[\"생성\",\"연결\"]} fx={ModifyTabStore}/>\r\n    </ModifyTabStore.Provider>\r\n    <Paper>\r\n    <ConnectPayPersonID.Provider value={[connectPayPerson,setConnectPayPerson]}>\r\n    {_controller()}\r\n    <Grid container justify=\"flex-end\" alignItems=\"center\" alignContent=\"center\" >\r\n    <Button onClick={(e)=>{_saveClick();setAppChoose(1)}}>저장</Button>\r\n    <Button onClick={(e)=>{setAppChoose(1)}}>돌아가기</Button>\r\n    </Grid>\r\n    \r\n    </ConnectPayPersonID.Provider>\r\n    </Paper>\r\n    </React.Fragment>        \r\n    )\r\n\r\n\r\n}\r\n\r\nexport default ModifyPayPerson;","import React,{useState} from 'react';\r\n\r\n\r\nimport Login from './components/Login'\r\nimport Main from './components/Main'\r\nimport {Store,ModifyDealID,varyIsAllPayInfo} from './Store';\r\nimport ModifyPayPerson from './components/ModifyPayPerson';\r\n\r\n\r\n/** 모달작업때문에 지금 논리 위아래바꿈 */\r\nfunction App() {\r\n const [choose,setChoose]= useState(0);\r\n  const [DealID,setDealID]= useState(\"\");\r\n  const [varyIsAllPay,setVaryAllPay]= useState(\"\");\r\n  \r\n  return (  \r\n      <Store.Provider value = {[choose,setChoose]}>\r\n        {choose==0&&<Login/>}\r\n        <ModifyDealID.Provider value ={[DealID,setDealID]}>\r\n            <varyIsAllPayInfo.Provider value ={[varyIsAllPay,setVaryAllPay]}>\r\n              {choose==1&&<Main/>}            \r\n            {choose==2 &&<ModifyPayPerson />}\r\n            </varyIsAllPayInfo.Provider>\r\n            \r\n        </ModifyDealID.Provider>\r\n      </Store.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n         \r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from \"./App\";\r\nimport { ApolloProvider } from 'react-apollo';\r\nimport { ApolloProvider as ApolloHooksProvider } from 'react-apollo-hooks';\r\nimport ApolloClient from \"apollo-boost\";\r\n\r\nconst client =  new ApolloClient({\r\n  uri: \"https://db-layer-de1a8af52f.herokuapp.com/data-layer/dev/\"\r\n});\r\n\r\n// create Apollo client\r\n\r\n ReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <ApolloHooksProvider client={client}>\r\n      <App />\r\n  </ApolloHooksProvider>\r\n  </ApolloProvider>, document.getElementById('root'));"],"sourceRoot":""}