{"version":3,"sources":["schema/Queries.js","components/Login.js","schema/Mutation.js","components/DealDelete.js","components/CheckBox.js","components/Deal.js","components/Main.js","App.js","index.js"],"names":["Login_Query","gql","_templateObject","isDeliverList","_templateObject2","isAllPayList","_templateObject3","notBothList","_templateObject4","useStyles","makeStyles","theme","container","display","flexWrap","textField","marginLeft","spacing","marginRight","width","dense","marginTop","menu","Login","_useState","useState","_useState2","Object","slicedToArray","count","setCount","_useState3","_useState4","password","setPassword","_useState5","_useState6","challenge","setChallenge","_useState7","_useState8","isOpen","setIsOpen","_useQuery","useQuery","data","error","loading","classes","react_default","a","createElement","message","Fragment","admins","Typography","variant","align","gutterBottom","Grid","justify","alignItems","alignContent","TextField","id","label","className","type","autoComplete","margin","onKeyPress","e","key","onChange","target","value","Button","onClick","react_router","to","Remove_Deal","Mutation_templateObject","ChangeTrueIsDeliver","Mutation_templateObject2","ChangeFalseIsDeliver","Mutation_templateObject3","ChangeFalseIsAllPay","Mutation_templateObject4","DealDelete","_ref","ID","deleteDeal","useMutation","style","fontWeight","fontSize","variables","CheckBox","isDeliver","isAllPay","value1","value2","checkBox","setCheckBox","changeTrueDeliver","changeFalseDeliver","changeFalseAllPay","_ChangeState","window","open","location","reload","Box","name","objectSpread","textAlign","Deal","props","p","m","backgroundColor","grey","components_DealDelete","createdAt","address","userName","userPhonNumber","Table","TableBody","createTableRow","productName","productNum","productCost","bank","payPerson","par1","par2","par3","TableRow","TableCell","_TableBody","console","log","_textDealList","components_CheckBox","root","Main","records","setRecord","isEmpty","setEmpty","choose","setChoose","handleChange","event","newValue","AppBar","position","Toolbar","Tabs","indicatorColor","textColor","Tab","_Header","react_apollo_esm","query","deals","length","_ref2","_ref3","notBoth_list","GridList","cellHeight","cols","map","record","components_Deal","user","product","_CreateDeal","App","react_router_dom","exact","path","component","client","ApolloClient","uri","ReactDOM","render","ApolloContext","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.77e1d68d.chunk.js","sourcesContent":["import gql from 'graphql-tag';\r\n\r\nexport const Login_Query = gql`\r\n    {\r\n        admins(where :{ID:\"cjwvv0qkw002c07319s4qrvre\"}){\r\n            ID\r\n            password\r\n        }\r\n    }\r\n\r\n`; \r\n\r\n\r\nexport const isDeliverList=gql`\r\n     {\r\n        deals(where:{isDeliver: false},orderBy:address_DESC){\r\n        ID\r\n        createdAt\r\n        address\r\n    \t\tproduct{\r\n          productName\r\n        }\r\n        productNum\r\n        productCost\r\n        \r\n        isDeliver\r\n        payPerson{\r\n          payPerson\r\n          isAllPay\r\n          bank\r\n        }\r\n        user{\r\n          userName\r\n          userPhonNumber\r\n        }        \r\n  \r\n    }\r\n  \r\n  }\r\n`;\r\nexport const isAllPayList=gql`\r\n    {\r\n        deals(where:{payPerson:{isAllPay:false}},orderBy:address_DESC){\r\n          ID\r\n        createdAt\r\n        address\r\n    \t\tproduct{\r\n          productName\r\n        }\r\n        productNum\r\n        productCost\r\n        \r\n        isDeliver\r\n        payPerson{\r\n          payPerson\r\n          isAllPay\r\n          bank\r\n        }\r\n        user{\r\n          userName\r\n          userPhonNumber\r\n      }          \r\n    }\r\n    }\r\n\r\n`;\r\nexport const notBothList=gql`\r\n    {\r\n        deals(where: {AND:[{ isDeliver: true },{payPerson:{isAllPay:true}}]},orderBy:address_DESC){\r\n          ID\r\n        createdAt\r\n        address\r\n    \t\tproduct{\r\n          productName\r\n        }\r\n        productNum\r\n        productCost\r\n        \r\n        isDeliver\r\n        payPerson{\r\n          payPerson\r\n          isAllPay\r\n          bank\r\n        }\r\n        user{\r\n          userName\r\n          userPhonNumber\r\n      }          \r\n    }\r\n    }\r\n\r\n`;","import React,{useState} from \"react\";\r\nimport { Redirect } from 'react-router'\r\nimport { useQuery } from 'react-apollo-hooks';\r\nimport {Login_Query} from \"../schema/Queries\";\r\nimport {Typography,Button,Grid,TextField} from '@material-ui/core/';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  container: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    width: 200,\r\n  },\r\n  dense: {\r\n    marginTop: 19,\r\n  },\r\n  menu: {\r\n    width: 200,\r\n  },\r\n  \r\n}));\r\n\r\n\r\nconst Login=()=>{ \r\n    const [count,setCount]= useState(0);\r\n    const [password,setPassword]= useState(\"\");\r\n    const [challenge,setChallenge]=useState(\"\");\r\n    const [isOpen,setIsOpen]=useState(false);\r\n    const { data, error, loading } = useQuery(Login_Query);\r\n    const _compare=()=>{\r\n        if(isOpen) return <Redirect to =\"/main\"/>\r\n    else if(count !=1) return<h3>Login failed</h3>  \r\n    }\r\n    const _passwordTextField=()=>{\r\n        return <div>\r\n          <TextField\r\n              id=\"standard-password-input\"\r\n              label=\"비밀번호\"\r\n              className={classes.textField}\r\n              type=\"password\"\r\n              autoComplete=\"current-password\"\r\n              margin=\"normal\"\r\n              onKeyPress={(e) =>{\r\n              if (e.key === \"Enter\"&&password==challenge)setIsOpen(true)\r\n              else if(e.key===\"Enter\"){\r\n                setIsOpen(false);\r\n                setCount(count+1);}}}\r\n              onChange={(e)=>{setChallenge(e.target.value)}}\r\n            />\r\n          </div>    \r\n    }\r\n    const classes = useStyles();\r\n    const _HeaderText=()=>{\r\n      return <div>\r\n      <Typography variant=\"h2\"align =\"center\" gutterBottom>\r\n      Login\r\n    </Typography><br/>\r\n    </div>\r\n    }\r\n    const _loginButton=()=>{\r\n      return <div>\r\n        <Button onClick={(e)=>{\r\n                    if(password == challenge){setIsOpen(true); }\r\n                    else{setIsOpen(false);}\r\n                    setCount(count+1);}}>로그인\r\n          </Button>\r\n      </div>\r\n    }\r\n    if (loading) return <h2>Loading...</h2>;\r\n\r\n    if (error) return <div>Error! {error.message}</div>;\r\n    return (\r\n      <React.Fragment>\r\n          {count==0&&(setPassword(data.admins[0].password),setCount(count+1))}   \r\n            {_HeaderText()}\r\n            <Grid container justify=\"center\" alignItems=\"center\" alignContent=\"center\" > \r\n              {_passwordTextField()}\r\n              {_loginButton()}\r\n              </Grid>\r\n              <Grid container justify=\"center\" alignItems=\"center\" alignContent=\"center\" >        \r\n              {_compare()}\r\n              </Grid > \r\n              \r\n        </React.Fragment>\r\n    );\r\n    \r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport default Login;\r\n\r\n\r\n\r\n\r\n\r\n","import gql from 'graphql-tag';\r\n\r\n\r\nexport const Remove_Deal = gql`\r\nmutation removeDeal($ID: ID!){\r\n    deleteDeal(where:{ID:$ID}){\r\n        createdAt\r\n    }\r\n\r\n}\r\n\r\n`;\r\n\r\n\r\nexport const ChangeTrueIsDeliver=gql`\r\nmutation changeTrueIsDeliver($ID:ID!){\r\n    updateDeal(data:{isDeliver: true},where:{ID: $ID}){\r\n        createdAt\r\n    }\r\n}\r\n`;\r\nexport const ChangeFalseIsDeliver=gql`\r\nmutation changeFalseIsDeliver($ID:ID!){\r\n    updateDeal(data:{isDeliver: false},where:{ID: $ID}){\r\n        createdAt\r\n    }\r\n}\r\n`;\r\n\r\n\r\n\r\nexport const ChangeFalseIsAllPay=gql`\r\nmutation changeFalseIsAllPay($ID:ID!){\r\n    updateDeal(where: {ID: $DealID}, data: {payPerson: {connect: {ID: \"cjwvv0ya0002n07317wbytqy2\"}}}) {\r\n    createdAt\r\n  }\r\n}\r\n\r\n`;\r\n\r\n","import React from \"react\";\r\nimport {Remove_Deal} from \"../schema/Mutation\";\r\nimport { useMutation } from 'react-apollo-hooks';\r\n\r\nimport {Button} from '@material-ui/core/';\r\n\r\n\r\nfunction DealDelete({ID}){\r\n\r\nconst deleteDeal = useMutation(Remove_Deal);\r\nreturn(\r\n    <React.Fragment>\r\n        <Button   style={{fontWeight:\"bold\",fontSize:'20px'}}onClick= {(e)=>{deleteDeal({variables:{ID:ID}})}}> 삭제</Button>\r\n    </React.Fragment>\r\n)\r\n\r\n}\r\n\r\n\r\nexport default DealDelete;","import React,{useState} from \"react\";\r\nimport {useMutation} from \"react-apollo-hooks\";\r\nimport {ChangeTrueIsDeliver} from \"../schema/Mutation\";\r\nimport {ChangeFalseIsDeliver} from \"../schema/Mutation\";\r\nimport {ChangeFalseIsAllPay} from \"../schema/Mutation\";\r\nimport {TButton,Checkbox,Grid,Button,Box} from '@material-ui/core/';\r\nimport { grey } from \"@material-ui/core/colors\";\r\n\r\n function CheckBox({isDeliver,isAllPay,ID}){\r\n    const [checkBox,setCheckBox]= useState({\r\n        value1:isDeliver,\r\n        value2:isAllPay,\r\n    });\r\n    const changeTrueDeliver= useMutation(ChangeTrueIsDeliver)\r\n    const changeFalseDeliver = useMutation(ChangeFalseIsDeliver)\r\n    const changeFalseAllPay = useMutation(ChangeFalseIsAllPay)\r\n    const _ChangeState=()=>{\r\n      \r\n        if(!checkBox.value1&&!checkBox.value2){changeFalseDeliver({variables:{ID:ID}});changeFalseAllPay({variables:{ID:ID}})}\r\n        if(!checkBox.value1&&checkBox.value2){changeFalseDeliver({variables:{ID:ID}}); window.open(\"https://db-layer-de1a8af52f.herokuapp.com/data-layer/dev/_admin\",'_blank')}\r\n        if(checkBox.value1&&!checkBox.value2){changeTrueDeliver({variables:{ID:ID}});changeFalseAllPay({variables:{ID:ID}})}\r\n        if(checkBox.value1&&checkBox.value2){changeTrueDeliver({variables:{ID:ID}}); window.open(\"https://db-layer-de1a8af52f.herokuapp.com/data-layer/dev/_admin\",'_blank')}\r\n         return window.location.reload();\r\n    }  \r\n    function checkBoxList() {\r\n        return <Grid container justify=\"center\" >\r\n                    <Box container =\"span\" >\r\n                    배달 반전<input type=\"checkbox\" name=\"isDeliver\" value=\"배달\" onClick={() => { setCheckBox({ ...checkBox, value1: !checkBox.value1 }); }} />\r\n                    결제반전<input type=\"checkbox\" name=\"isPay\" value=\"결제\" onClick={() => {\r\n                        setCheckBox({ ...checkBox, value2: !checkBox.value2 });\r\n                    }} />\r\n                    <Button style={{ fontWeight: \"bold\" }} onClick={() => { _ChangeState(); }}> 저장</Button>\r\n                    </Box>\r\n                </Grid>;\r\n    }\r\n    return(\r\n        <React.Fragment>\r\n        {checkBoxList()}\r\n        </React.Fragment>\r\n    )\r\n\r\n    \r\n}\r\n\r\n\r\n\r\nexport default CheckBox;","import React from \"react\";\r\nimport DealDelete from \"./DealDelete\";\r\nimport CheckBox from \"./CheckBox\";\r\nimport {Typography,Button,Grid,Table,TableRow,TableHead,TableCell,TableBody,Box} from '@material-ui/core/';\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { borderRight } from \"@material-ui/system\";\r\nimport { createMuiTheme } from '@material-ui/core/styles'\r\nimport grey from '@material-ui/core/colors/grey';\r\n\r\n\r\n\r\nconst useStyles = makeStyles(theme=>({\r\n    Typography:{\r\n        textAlign: \"center\"\r\n    \r\n    }\r\n    \r\n}));\r\n\r\nfunction Deal(props){\r\n   const classes= useStyles();\r\n    \r\n    return(\r\n        <React.Fragment>\r\n            <Box container ={props.ID} p={2} m={1}style={{backgroundColor:grey[50]}}>\r\n                <Grid container  justify=\"flex-end\"><DealDelete ID={props.ID} /></Grid>\r\n                <Grid container justify =\"center\">\r\n                    {_textDealList(classes, props)}\r\n                    <CheckBox isDeliver={props.isDeliver} isAllPay={props.isAllPay} ID={props.ID}/>\r\n                </Grid>\r\n            </Box>\r\n     </React.Fragment>\r\n    )\r\n\r\n    \r\n}\r\n\r\nexport default Deal;\r\n\r\nfunction _textDealList(classes, props) {\r\n    \r\n    return <div>\r\n        <Typography variant=\"body1\" className={classes.Typography} gutterBottom>\r\n            기간:{props.createdAt}\r\n        </Typography>\r\n        <Typography variant=\"body1\" className={classes.Typography} gutterBottom>\r\n            주소:{props.address}\r\n        </Typography>\r\n        <Typography variant=\"body1\" className={classes.Typography} gutterBottom>\r\n            구매자:{props.userName}/{props.userPhonNumber}\r\n        </Typography>\r\n        {_priceList()}\r\n        {console.log(props.isAllPay)}\r\n        <Typography variant=\"body1\" className={classes.Typography} gutterBottom>\r\n            \r\n            배달현황: {props.isDeliver || false ? \"o\" : \"x\"}&nbsp; 결제현황: {props.isAllPay || false ? \"o\" : \"x\"}\r\n        </Typography>\r\n    </div>;\r\n\r\n\r\n    function _priceList() {\r\n        return<div>\r\n            <Table>\r\n                {_TableBody()}\r\n            </Table>\r\n        </div>;\r\n        function _TableBody(){\r\n            return <div>\r\n                    <TableBody>\r\n                        {createTableRow(\"제품\",\"수량\",\"가격\")}\r\n                        {createTableRow(props.productName,props.productNum,props.productCost)}\r\n                        {createTableRow(\"청구금액\",\" \",props.productCost)}\r\n                        {createTableRow(\"결제자\",props.bank==\"미정\"||\"직거래\"? props.bank:props.bank+\"은행\",props.payPerson)}                        \r\n                    </TableBody>\r\n                    </div>\r\n\r\n            function createTableRow(par1,par2,par3) {\r\n                return <TableRow>\r\n                    <TableCell align=\"center\">{par1}</TableCell>\r\n                    <TableCell align=\"center\">{par2}</TableCell>\r\n                    <TableCell align=\"center\">{par3}</TableCell>\r\n                </TableRow>;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n","import React,{useState} from \"react\";\r\nimport Deal from \"./Deal\";\r\nimport {Query} from \"react-apollo\";\r\nimport {isDeliverList} from \"../schema/Queries\";\r\nimport {isAllPayList} from \"../schema/Queries\";\r\nimport {notBothList} from \"../schema/Queries\";\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport {AppBar,Toolbar,Typography,Card,Tabs,GridList,GridListTile,Paper} from '@material-ui/core';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport { grey } from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles(theme=>({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justify: 'center',\r\n        \r\n      }\r\n  }));\r\n\r\n\r\nfunction Main(){\r\n    const [records,setRecord]= useState(null);\r\n    const [isEmpty,setEmpty]=useState(false);\r\n    const [choose,setChoose]=useState(0);\r\n    const classes= useStyles();\r\n    const _isDeliver_Query=()=>{  \r\n        return <Query query= {isDeliverList}> \r\n        {\r\n               ({loading,data,error})=> \r\n               {   \r\n                   if(loading) return <h2>Loading</h2>\r\n                   if(error) return  <h2>error, retry again</h2>\r\n                   if(data)  {\r\n                        if(data.deals.length==0){     \r\n                            setEmpty(true);\r\n                        }\r\n                        else{\r\n                            setEmpty(false);  \r\n                        }\r\n                        setRecord(data.deals);\r\n                        return <br/>\r\n                    }                   \r\n               }\r\n        }</Query>\r\n\r\n    }\r\n    const _isAllPay_Query=()=>{\r\n        return <Query query= {isAllPayList}> \r\n            {\r\n                   ({loading,data,error})=> \r\n                   {   \r\n                       if(loading) return <h2>Loading</h2>\r\n                       if(error) return  <h2>error, retry again</h2>\r\n                       if(data)  {\r\n                            if(data.deals.length==0){\r\n                                \r\n                                setEmpty(true);\r\n                            }\r\n                            else{\r\n                                setEmpty(false);     \r\n                            }\r\n                        console.log(data.deals);\r\n                        setRecord(data.deals);\r\n                        return <br/>\r\n                       }                   \r\n                   }\r\n            }</Query>\r\n    }\r\n    const _notBoth_Query=()=>{\r\n        return <Query query= {notBothList}> \r\n        {\r\n            ({loading,data,error})=> \r\n                   {   \r\n                       if(loading) return <h2>Loading</h2>\r\n                       if(error) return  <h2>error, retry again</h2>\r\n                       if(data)  {\r\n                        console.log(data.notBoth_list);\r\n                        if(data.deals.length==0){\r\n                        setEmpty(true);\r\n                        }\r\n                        else{\r\n                            setEmpty(false);    \r\n                            console.log(isEmpty);    \r\n                        }\r\n\r\n                       setRecord(data.deals);\r\n                       return <br/>\r\n                    }\r\n                }\r\n        }</Query>\r\n    }\r\n    const _checkState=()=>{\r\n        if(isEmpty)return <h2>없음</h2>;\r\n        if(records!=null){\r\n            return <GridList  cellHeight=\"\"  cols={2}>\r\n        \r\n                {\r\n                    records.map(record=>{\r\n                    return _CreateDeal(record)\r\n                    })\r\n                }\r\n        \r\n                \r\n        </GridList>  \r\n        \r\n        }\r\n    \r\n    }\r\n\r\n    const _controller=()=>{\r\n      \r\n        if(choose==3){ \r\n            window.open(\"https://db-layer-de1a8af52f.herokuapp.com/data-layer/dev/_admin\",'_blank')\r\n        }\r\n        if(choose==0)return _isDeliver_Query();\r\n        if(choose==1)return _isAllPay_Query();\r\n        if(choose==2)return _notBoth_Query();\r\n        \r\n    }\r\n    const _Header=()=>{\r\n        function handleChange(event, newValue) {\r\n            setChoose(newValue);\r\n          }\r\n          function _Tabs(){\r\n            return<div>\r\n                <Tabs\r\n                    value={choose}\r\n                    onChange={handleChange}\r\n                    indicatorColor=\"primary\"\r\n                    textColor=\"primary\"\r\n                    variant=\"fullWidth\"\r\n                    >\r\n                    <Tab label=\"미배달\"/>\r\n                    <Tab label=\"미결제\"/>\r\n                    <Tab label=\"완료\"/>\r\n                    <Tab label=\"추가\"/>\r\n                </Tabs>\r\n            </div>       \r\n          }     \r\n          return (\r\n           <React.Fragment>   \r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h5\" gutterBottom>맞춤거래기록부</Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n                {_Tabs()}\r\n            </React.Fragment>\r\n            \r\n            )\r\n       \r\n    }\r\n    \r\n    return(    \r\n        <React.Fragment>\r\n        {_Header()}\r\n        {_controller()}\r\n        {_checkState()}\r\n        </React.Fragment>\r\n        );\r\n    \r\n    \r\n\r\n    function _CreateDeal(record) {\r\n        return <Deal key={record.ID} ID={record.ID} createdAt={record.createdAt} address={record.address} userName={record.user.userName} userPhonNumber={record.user.userPhonNumber} payPerson={record.payPerson.payPerson} productName={record.product.productName} productNum={record.productNum} productCost={record.productCost} isAllPay={record.payPerson.isAllPay} isDeliver={record.isDeliver} bank={record.payPerson.bank} />;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Main;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nimport Login from './components/Login'\nimport Main from './components/Main'\n\n\nfunction App() {\n  return (\n    \n<Router>\n    <div>\n      <main>\n        <Route exact path='/' component={Login} />\n        <Route path=\"/main\" component={Main} /> \n      </main>\n    </div>\n  </Router>\n\n\n\n\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\nimport { ApolloProvider } from 'react-apollo';\nimport { ApolloProvider as ApolloHooksProvider } from 'react-apollo-hooks';\nimport ApolloClient from \"apollo-boost\";\n\nconst client =  new ApolloClient({\n  uri: \"https://db-layer-de1a8af52f.herokuapp.com/data-layer/dev/\"\n});\n // create Apollo client\n\n ReactDOM.render(\n  <ApolloProvider client={client}>\n    <ApolloHooksProvider client={client}>\n      <App />\n  </ApolloHooksProvider>\n  </ApolloProvider>, document.getElementById('root'));"],"sourceRoot":""}