module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type Admin {
  ID: ID!
  name: String!
  password: String!
}

type AdminConnection {
  pageInfo: PageInfo!
  edges: [AdminEdge]!
  aggregate: AggregateAdmin!
}

input AdminCreateInput {
  ID: ID
  name: String!
  password: String!
}

input AdminCreateOneInput {
  create: AdminCreateInput
  connect: AdminWhereUniqueInput
}

type AdminEdge {
  node: Admin!
  cursor: String!
}

enum AdminOrderByInput {
  ID_ASC
  ID_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
}

type AdminPreviousValues {
  ID: ID!
  name: String!
  password: String!
}

type AdminSubscriptionPayload {
  mutation: MutationType!
  node: Admin
  updatedFields: [String!]
  previousValues: AdminPreviousValues
}

input AdminSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AdminWhereInput
  AND: [AdminSubscriptionWhereInput!]
  OR: [AdminSubscriptionWhereInput!]
  NOT: [AdminSubscriptionWhereInput!]
}

input AdminUpdateDataInput {
  name: String
  password: String
}

input AdminUpdateInput {
  name: String
  password: String
}

input AdminUpdateManyMutationInput {
  name: String
  password: String
}

input AdminUpdateOneRequiredInput {
  create: AdminCreateInput
  update: AdminUpdateDataInput
  upsert: AdminUpsertNestedInput
  connect: AdminWhereUniqueInput
}

input AdminUpsertNestedInput {
  update: AdminUpdateDataInput!
  create: AdminCreateInput!
}

input AdminWhereInput {
  ID: ID
  ID_not: ID
  ID_in: [ID!]
  ID_not_in: [ID!]
  ID_lt: ID
  ID_lte: ID
  ID_gt: ID
  ID_gte: ID
  ID_contains: ID
  ID_not_contains: ID
  ID_starts_with: ID
  ID_not_starts_with: ID
  ID_ends_with: ID
  ID_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [AdminWhereInput!]
  OR: [AdminWhereInput!]
  NOT: [AdminWhereInput!]
}

input AdminWhereUniqueInput {
  ID: ID
}

type AggregateAdmin {
  count: Int!
}

type AggregateDeal {
  count: Int!
}

type AggregatePayPerson {
  count: Int!
}

type AggregateProduct {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Deal {
  ID: ID!
  address: String!
  product: Product!
  productNum: String!
  productCost: Int!
  payPerson: PayPerson!
  user: User!
  admin: Admin!
  isDeliver: Boolean
  createdAt: DateTime
}

type DealConnection {
  pageInfo: PageInfo!
  edges: [DealEdge]!
  aggregate: AggregateDeal!
}

input DealCreateInput {
  ID: ID
  address: String!
  product: ProductCreateOneInput!
  productNum: String!
  productCost: Int!
  payPerson: PayPersonCreateOneInput!
  user: UserCreateOneInput!
  admin: AdminCreateOneInput!
  isDeliver: Boolean
}

type DealEdge {
  node: Deal!
  cursor: String!
}

enum DealOrderByInput {
  ID_ASC
  ID_DESC
  address_ASC
  address_DESC
  productNum_ASC
  productNum_DESC
  productCost_ASC
  productCost_DESC
  isDeliver_ASC
  isDeliver_DESC
  createdAt_ASC
  createdAt_DESC
}

type DealPreviousValues {
  ID: ID!
  address: String!
  productNum: String!
  productCost: Int!
  isDeliver: Boolean
  createdAt: DateTime
}

type DealSubscriptionPayload {
  mutation: MutationType!
  node: Deal
  updatedFields: [String!]
  previousValues: DealPreviousValues
}

input DealSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DealWhereInput
  AND: [DealSubscriptionWhereInput!]
  OR: [DealSubscriptionWhereInput!]
  NOT: [DealSubscriptionWhereInput!]
}

input DealUpdateInput {
  address: String
  product: ProductUpdateOneRequiredInput
  productNum: String
  productCost: Int
  payPerson: PayPersonUpdateOneRequiredInput
  user: UserUpdateOneRequiredInput
  admin: AdminUpdateOneRequiredInput
  isDeliver: Boolean
}

input DealUpdateManyMutationInput {
  address: String
  productNum: String
  productCost: Int
  isDeliver: Boolean
}

input DealWhereInput {
  ID: ID
  ID_not: ID
  ID_in: [ID!]
  ID_not_in: [ID!]
  ID_lt: ID
  ID_lte: ID
  ID_gt: ID
  ID_gte: ID
  ID_contains: ID
  ID_not_contains: ID
  ID_starts_with: ID
  ID_not_starts_with: ID
  ID_ends_with: ID
  ID_not_ends_with: ID
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  product: ProductWhereInput
  productNum: String
  productNum_not: String
  productNum_in: [String!]
  productNum_not_in: [String!]
  productNum_lt: String
  productNum_lte: String
  productNum_gt: String
  productNum_gte: String
  productNum_contains: String
  productNum_not_contains: String
  productNum_starts_with: String
  productNum_not_starts_with: String
  productNum_ends_with: String
  productNum_not_ends_with: String
  productCost: Int
  productCost_not: Int
  productCost_in: [Int!]
  productCost_not_in: [Int!]
  productCost_lt: Int
  productCost_lte: Int
  productCost_gt: Int
  productCost_gte: Int
  payPerson: PayPersonWhereInput
  user: UserWhereInput
  admin: AdminWhereInput
  isDeliver: Boolean
  isDeliver_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [DealWhereInput!]
  OR: [DealWhereInput!]
  NOT: [DealWhereInput!]
}

input DealWhereUniqueInput {
  ID: ID
}

scalar Long

type Mutation {
  createAdmin(data: AdminCreateInput!): Admin!
  updateAdmin(data: AdminUpdateInput!, where: AdminWhereUniqueInput!): Admin
  updateManyAdmins(data: AdminUpdateManyMutationInput!, where: AdminWhereInput): BatchPayload!
  upsertAdmin(where: AdminWhereUniqueInput!, create: AdminCreateInput!, update: AdminUpdateInput!): Admin!
  deleteAdmin(where: AdminWhereUniqueInput!): Admin
  deleteManyAdmins(where: AdminWhereInput): BatchPayload!
  createDeal(data: DealCreateInput!): Deal!
  updateDeal(data: DealUpdateInput!, where: DealWhereUniqueInput!): Deal
  updateManyDeals(data: DealUpdateManyMutationInput!, where: DealWhereInput): BatchPayload!
  upsertDeal(where: DealWhereUniqueInput!, create: DealCreateInput!, update: DealUpdateInput!): Deal!
  deleteDeal(where: DealWhereUniqueInput!): Deal
  deleteManyDeals(where: DealWhereInput): BatchPayload!
  createPayPerson(data: PayPersonCreateInput!): PayPerson!
  updatePayPerson(data: PayPersonUpdateInput!, where: PayPersonWhereUniqueInput!): PayPerson
  updateManyPayPersons(data: PayPersonUpdateManyMutationInput!, where: PayPersonWhereInput): BatchPayload!
  upsertPayPerson(where: PayPersonWhereUniqueInput!, create: PayPersonCreateInput!, update: PayPersonUpdateInput!): PayPerson!
  deletePayPerson(where: PayPersonWhereUniqueInput!): PayPerson
  deleteManyPayPersons(where: PayPersonWhereInput): BatchPayload!
  createProduct(data: ProductCreateInput!): Product!
  updateProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product
  updateManyProducts(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  upsertProduct(where: ProductWhereUniqueInput!, create: ProductCreateInput!, update: ProductUpdateInput!): Product!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteManyProducts(where: ProductWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PayPerson {
  ID: ID!
  bank: String!
  payPerson: String!
  isAllPay: Boolean!
}

type PayPersonConnection {
  pageInfo: PageInfo!
  edges: [PayPersonEdge]!
  aggregate: AggregatePayPerson!
}

input PayPersonCreateInput {
  ID: ID
  bank: String!
  payPerson: String!
  isAllPay: Boolean
}

input PayPersonCreateOneInput {
  create: PayPersonCreateInput
  connect: PayPersonWhereUniqueInput
}

type PayPersonEdge {
  node: PayPerson!
  cursor: String!
}

enum PayPersonOrderByInput {
  ID_ASC
  ID_DESC
  bank_ASC
  bank_DESC
  payPerson_ASC
  payPerson_DESC
  isAllPay_ASC
  isAllPay_DESC
}

type PayPersonPreviousValues {
  ID: ID!
  bank: String!
  payPerson: String!
  isAllPay: Boolean!
}

type PayPersonSubscriptionPayload {
  mutation: MutationType!
  node: PayPerson
  updatedFields: [String!]
  previousValues: PayPersonPreviousValues
}

input PayPersonSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PayPersonWhereInput
  AND: [PayPersonSubscriptionWhereInput!]
  OR: [PayPersonSubscriptionWhereInput!]
  NOT: [PayPersonSubscriptionWhereInput!]
}

input PayPersonUpdateDataInput {
  bank: String
  payPerson: String
  isAllPay: Boolean
}

input PayPersonUpdateInput {
  bank: String
  payPerson: String
  isAllPay: Boolean
}

input PayPersonUpdateManyMutationInput {
  bank: String
  payPerson: String
  isAllPay: Boolean
}

input PayPersonUpdateOneRequiredInput {
  create: PayPersonCreateInput
  update: PayPersonUpdateDataInput
  upsert: PayPersonUpsertNestedInput
  connect: PayPersonWhereUniqueInput
}

input PayPersonUpsertNestedInput {
  update: PayPersonUpdateDataInput!
  create: PayPersonCreateInput!
}

input PayPersonWhereInput {
  ID: ID
  ID_not: ID
  ID_in: [ID!]
  ID_not_in: [ID!]
  ID_lt: ID
  ID_lte: ID
  ID_gt: ID
  ID_gte: ID
  ID_contains: ID
  ID_not_contains: ID
  ID_starts_with: ID
  ID_not_starts_with: ID
  ID_ends_with: ID
  ID_not_ends_with: ID
  bank: String
  bank_not: String
  bank_in: [String!]
  bank_not_in: [String!]
  bank_lt: String
  bank_lte: String
  bank_gt: String
  bank_gte: String
  bank_contains: String
  bank_not_contains: String
  bank_starts_with: String
  bank_not_starts_with: String
  bank_ends_with: String
  bank_not_ends_with: String
  payPerson: String
  payPerson_not: String
  payPerson_in: [String!]
  payPerson_not_in: [String!]
  payPerson_lt: String
  payPerson_lte: String
  payPerson_gt: String
  payPerson_gte: String
  payPerson_contains: String
  payPerson_not_contains: String
  payPerson_starts_with: String
  payPerson_not_starts_with: String
  payPerson_ends_with: String
  payPerson_not_ends_with: String
  isAllPay: Boolean
  isAllPay_not: Boolean
  AND: [PayPersonWhereInput!]
  OR: [PayPersonWhereInput!]
  NOT: [PayPersonWhereInput!]
}

input PayPersonWhereUniqueInput {
  ID: ID
}

type Product {
  ID: ID!
  productName: String!
  productLotNumber: String!
  isNow: Boolean
}

type ProductConnection {
  pageInfo: PageInfo!
  edges: [ProductEdge]!
  aggregate: AggregateProduct!
}

input ProductCreateInput {
  ID: ID
  productName: String!
  productLotNumber: String!
  isNow: Boolean
}

input ProductCreateOneInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type ProductEdge {
  node: Product!
  cursor: String!
}

enum ProductOrderByInput {
  ID_ASC
  ID_DESC
  productName_ASC
  productName_DESC
  productLotNumber_ASC
  productLotNumber_DESC
  isNow_ASC
  isNow_DESC
}

type ProductPreviousValues {
  ID: ID!
  productName: String!
  productLotNumber: String!
  isNow: Boolean
}

type ProductSubscriptionPayload {
  mutation: MutationType!
  node: Product
  updatedFields: [String!]
  previousValues: ProductPreviousValues
}

input ProductSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ProductWhereInput
  AND: [ProductSubscriptionWhereInput!]
  OR: [ProductSubscriptionWhereInput!]
  NOT: [ProductSubscriptionWhereInput!]
}

input ProductUpdateDataInput {
  productName: String
  productLotNumber: String
  isNow: Boolean
}

input ProductUpdateInput {
  productName: String
  productLotNumber: String
  isNow: Boolean
}

input ProductUpdateManyMutationInput {
  productName: String
  productLotNumber: String
  isNow: Boolean
}

input ProductUpdateOneRequiredInput {
  create: ProductCreateInput
  update: ProductUpdateDataInput
  upsert: ProductUpsertNestedInput
  connect: ProductWhereUniqueInput
}

input ProductUpsertNestedInput {
  update: ProductUpdateDataInput!
  create: ProductCreateInput!
}

input ProductWhereInput {
  ID: ID
  ID_not: ID
  ID_in: [ID!]
  ID_not_in: [ID!]
  ID_lt: ID
  ID_lte: ID
  ID_gt: ID
  ID_gte: ID
  ID_contains: ID
  ID_not_contains: ID
  ID_starts_with: ID
  ID_not_starts_with: ID
  ID_ends_with: ID
  ID_not_ends_with: ID
  productName: String
  productName_not: String
  productName_in: [String!]
  productName_not_in: [String!]
  productName_lt: String
  productName_lte: String
  productName_gt: String
  productName_gte: String
  productName_contains: String
  productName_not_contains: String
  productName_starts_with: String
  productName_not_starts_with: String
  productName_ends_with: String
  productName_not_ends_with: String
  productLotNumber: String
  productLotNumber_not: String
  productLotNumber_in: [String!]
  productLotNumber_not_in: [String!]
  productLotNumber_lt: String
  productLotNumber_lte: String
  productLotNumber_gt: String
  productLotNumber_gte: String
  productLotNumber_contains: String
  productLotNumber_not_contains: String
  productLotNumber_starts_with: String
  productLotNumber_not_starts_with: String
  productLotNumber_ends_with: String
  productLotNumber_not_ends_with: String
  isNow: Boolean
  isNow_not: Boolean
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
}

input ProductWhereUniqueInput {
  ID: ID
}

type Query {
  admin(where: AdminWhereUniqueInput!): Admin
  admins(where: AdminWhereInput, orderBy: AdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Admin]!
  adminsConnection(where: AdminWhereInput, orderBy: AdminOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AdminConnection!
  deal(where: DealWhereUniqueInput!): Deal
  deals(where: DealWhereInput, orderBy: DealOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Deal]!
  dealsConnection(where: DealWhereInput, orderBy: DealOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DealConnection!
  payPerson(where: PayPersonWhereUniqueInput!): PayPerson
  payPersons(where: PayPersonWhereInput, orderBy: PayPersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PayPerson]!
  payPersonsConnection(where: PayPersonWhereInput, orderBy: PayPersonOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PayPersonConnection!
  product(where: ProductWhereUniqueInput!): Product
  products(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Product]!
  productsConnection(where: ProductWhereInput, orderBy: ProductOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProductConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  admin(where: AdminSubscriptionWhereInput): AdminSubscriptionPayload
  deal(where: DealSubscriptionWhereInput): DealSubscriptionPayload
  payPerson(where: PayPersonSubscriptionWhereInput): PayPersonSubscriptionPayload
  product(where: ProductSubscriptionWhereInput): ProductSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  ID: ID!
  userName: String!
  userPhonNumber: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  ID: ID
  userName: String!
  userPhonNumber: String!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  ID_ASC
  ID_DESC
  userName_ASC
  userName_DESC
  userPhonNumber_ASC
  userPhonNumber_DESC
}

type UserPreviousValues {
  ID: ID!
  userName: String!
  userPhonNumber: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  userName: String
  userPhonNumber: String
}

input UserUpdateInput {
  userName: String
  userPhonNumber: String
}

input UserUpdateManyMutationInput {
  userName: String
  userPhonNumber: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  ID: ID
  ID_not: ID
  ID_in: [ID!]
  ID_not_in: [ID!]
  ID_lt: ID
  ID_lte: ID
  ID_gt: ID
  ID_gte: ID
  ID_contains: ID
  ID_not_contains: ID
  ID_starts_with: ID
  ID_not_starts_with: ID
  ID_ends_with: ID
  ID_not_ends_with: ID
  userName: String
  userName_not: String
  userName_in: [String!]
  userName_not_in: [String!]
  userName_lt: String
  userName_lte: String
  userName_gt: String
  userName_gte: String
  userName_contains: String
  userName_not_contains: String
  userName_starts_with: String
  userName_not_starts_with: String
  userName_ends_with: String
  userName_not_ends_with: String
  userPhonNumber: String
  userPhonNumber_not: String
  userPhonNumber_in: [String!]
  userPhonNumber_not_in: [String!]
  userPhonNumber_lt: String
  userPhonNumber_lte: String
  userPhonNumber_gt: String
  userPhonNumber_gte: String
  userPhonNumber_contains: String
  userPhonNumber_not_contains: String
  userPhonNumber_starts_with: String
  userPhonNumber_not_starts_with: String
  userPhonNumber_ends_with: String
  userPhonNumber_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  ID: ID
}
`
      }
    