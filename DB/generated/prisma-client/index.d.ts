// Code generated by Prisma (prisma@1.33.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  admin: (where?: AdminWhereInput) => Promise<boolean>;
  deal: (where?: DealWhereInput) => Promise<boolean>;
  payPerson: (where?: PayPersonWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  admin: (where: AdminWhereUniqueInput) => AdminNullablePromise;
  admins: (args?: {
    where?: AdminWhereInput;
    orderBy?: AdminOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Admin>;
  adminsConnection: (args?: {
    where?: AdminWhereInput;
    orderBy?: AdminOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AdminConnectionPromise;
  deal: (where: DealWhereUniqueInput) => DealNullablePromise;
  deals: (args?: {
    where?: DealWhereInput;
    orderBy?: DealOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Deal>;
  dealsConnection: (args?: {
    where?: DealWhereInput;
    orderBy?: DealOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DealConnectionPromise;
  payPerson: (where: PayPersonWhereUniqueInput) => PayPersonNullablePromise;
  payPersons: (args?: {
    where?: PayPersonWhereInput;
    orderBy?: PayPersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PayPerson>;
  payPersonsConnection: (args?: {
    where?: PayPersonWhereInput;
    orderBy?: PayPersonOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PayPersonConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductNullablePromise;
  products: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Product>;
  productsConnection: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAdmin: (data: AdminCreateInput) => AdminPromise;
  updateAdmin: (args: {
    data: AdminUpdateInput;
    where: AdminWhereUniqueInput;
  }) => AdminPromise;
  updateManyAdmins: (args: {
    data: AdminUpdateManyMutationInput;
    where?: AdminWhereInput;
  }) => BatchPayloadPromise;
  upsertAdmin: (args: {
    where: AdminWhereUniqueInput;
    create: AdminCreateInput;
    update: AdminUpdateInput;
  }) => AdminPromise;
  deleteAdmin: (where: AdminWhereUniqueInput) => AdminPromise;
  deleteManyAdmins: (where?: AdminWhereInput) => BatchPayloadPromise;
  createDeal: (data: DealCreateInput) => DealPromise;
  updateDeal: (args: {
    data: DealUpdateInput;
    where: DealWhereUniqueInput;
  }) => DealPromise;
  updateManyDeals: (args: {
    data: DealUpdateManyMutationInput;
    where?: DealWhereInput;
  }) => BatchPayloadPromise;
  upsertDeal: (args: {
    where: DealWhereUniqueInput;
    create: DealCreateInput;
    update: DealUpdateInput;
  }) => DealPromise;
  deleteDeal: (where: DealWhereUniqueInput) => DealPromise;
  deleteManyDeals: (where?: DealWhereInput) => BatchPayloadPromise;
  createPayPerson: (data: PayPersonCreateInput) => PayPersonPromise;
  updatePayPerson: (args: {
    data: PayPersonUpdateInput;
    where: PayPersonWhereUniqueInput;
  }) => PayPersonPromise;
  updateManyPayPersons: (args: {
    data: PayPersonUpdateManyMutationInput;
    where?: PayPersonWhereInput;
  }) => BatchPayloadPromise;
  upsertPayPerson: (args: {
    where: PayPersonWhereUniqueInput;
    create: PayPersonCreateInput;
    update: PayPersonUpdateInput;
  }) => PayPersonPromise;
  deletePayPerson: (where: PayPersonWhereUniqueInput) => PayPersonPromise;
  deleteManyPayPersons: (where?: PayPersonWhereInput) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (args: {
    data: ProductUpdateInput;
    where: ProductWhereUniqueInput;
  }) => ProductPromise;
  updateManyProducts: (args: {
    data: ProductUpdateManyMutationInput;
    where?: ProductWhereInput;
  }) => BatchPayloadPromise;
  upsertProduct: (args: {
    where: ProductWhereUniqueInput;
    create: ProductCreateInput;
    update: ProductUpdateInput;
  }) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  admin: (
    where?: AdminSubscriptionWhereInput
  ) => AdminSubscriptionPayloadSubscription;
  deal: (
    where?: DealSubscriptionWhereInput
  ) => DealSubscriptionPayloadSubscription;
  payPerson: (
    where?: PayPersonSubscriptionWhereInput
  ) => PayPersonSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type DealOrderByInput =
  | "ID_ASC"
  | "ID_DESC"
  | "address_ASC"
  | "address_DESC"
  | "productNum_ASC"
  | "productNum_DESC"
  | "productCost_ASC"
  | "productCost_DESC"
  | "isDeliver_ASC"
  | "isDeliver_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type AdminOrderByInput =
  | "ID_ASC"
  | "ID_DESC"
  | "name_ASC"
  | "name_DESC"
  | "password_ASC"
  | "password_DESC";

export type ProductOrderByInput =
  | "ID_ASC"
  | "ID_DESC"
  | "productName_ASC"
  | "productName_DESC"
  | "productLotNumber_ASC"
  | "productLotNumber_DESC"
  | "isNow_ASC"
  | "isNow_DESC";

export type UserOrderByInput =
  | "ID_ASC"
  | "ID_DESC"
  | "userName_ASC"
  | "userName_DESC"
  | "userPhonNumber_ASC"
  | "userPhonNumber_DESC";

export type PayPersonOrderByInput =
  | "ID_ASC"
  | "ID_DESC"
  | "bank_ASC"
  | "bank_DESC"
  | "payPerson_ASC"
  | "payPerson_DESC"
  | "isAllPay_ASC"
  | "isAllPay_DESC";

export interface UserCreateInput {
  ID?: Maybe<ID_Input>;
  userName: String;
  userPhonNumber: String;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  ID: Maybe<ID_Input>;
}>;

export type AdminWhereUniqueInput = AtLeastOne<{
  ID: Maybe<ID_Input>;
}>;

export interface AdminWhereInput {
  ID?: Maybe<ID_Input>;
  ID_not?: Maybe<ID_Input>;
  ID_in?: Maybe<ID_Input[] | ID_Input>;
  ID_not_in?: Maybe<ID_Input[] | ID_Input>;
  ID_lt?: Maybe<ID_Input>;
  ID_lte?: Maybe<ID_Input>;
  ID_gt?: Maybe<ID_Input>;
  ID_gte?: Maybe<ID_Input>;
  ID_contains?: Maybe<ID_Input>;
  ID_not_contains?: Maybe<ID_Input>;
  ID_starts_with?: Maybe<ID_Input>;
  ID_not_starts_with?: Maybe<ID_Input>;
  ID_ends_with?: Maybe<ID_Input>;
  ID_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  AND?: Maybe<AdminWhereInput[] | AdminWhereInput>;
  OR?: Maybe<AdminWhereInput[] | AdminWhereInput>;
  NOT?: Maybe<AdminWhereInput[] | AdminWhereInput>;
}

export interface DealSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DealWhereInput>;
  AND?: Maybe<DealSubscriptionWhereInput[] | DealSubscriptionWhereInput>;
  OR?: Maybe<DealSubscriptionWhereInput[] | DealSubscriptionWhereInput>;
  NOT?: Maybe<DealSubscriptionWhereInput[] | DealSubscriptionWhereInput>;
}

export interface PayPersonUpsertNestedInput {
  update: PayPersonUpdateDataInput;
  create: PayPersonCreateInput;
}

export interface UserUpdateManyMutationInput {
  userName?: Maybe<String>;
  userPhonNumber?: Maybe<String>;
}

export interface PayPersonUpdateDataInput {
  bank?: Maybe<String>;
  payPerson?: Maybe<String>;
  isAllPay?: Maybe<Boolean>;
}

export type DealWhereUniqueInput = AtLeastOne<{
  ID: Maybe<ID_Input>;
}>;

export interface PayPersonUpdateOneRequiredInput {
  create?: Maybe<PayPersonCreateInput>;
  update?: Maybe<PayPersonUpdateDataInput>;
  upsert?: Maybe<PayPersonUpsertNestedInput>;
  connect?: Maybe<PayPersonWhereUniqueInput>;
}

export interface ProductUpdateInput {
  productName?: Maybe<String>;
  productLotNumber?: Maybe<String>;
  isNow?: Maybe<Boolean>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  ID: Maybe<ID_Input>;
}>;

export interface PayPersonUpdateInput {
  bank?: Maybe<String>;
  payPerson?: Maybe<String>;
  isAllPay?: Maybe<Boolean>;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  OR?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  NOT?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
}

export interface DealWhereInput {
  ID?: Maybe<ID_Input>;
  ID_not?: Maybe<ID_Input>;
  ID_in?: Maybe<ID_Input[] | ID_Input>;
  ID_not_in?: Maybe<ID_Input[] | ID_Input>;
  ID_lt?: Maybe<ID_Input>;
  ID_lte?: Maybe<ID_Input>;
  ID_gt?: Maybe<ID_Input>;
  ID_gte?: Maybe<ID_Input>;
  ID_contains?: Maybe<ID_Input>;
  ID_not_contains?: Maybe<ID_Input>;
  ID_starts_with?: Maybe<ID_Input>;
  ID_not_starts_with?: Maybe<ID_Input>;
  ID_ends_with?: Maybe<ID_Input>;
  ID_not_ends_with?: Maybe<ID_Input>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  product?: Maybe<ProductWhereInput>;
  productNum?: Maybe<String>;
  productNum_not?: Maybe<String>;
  productNum_in?: Maybe<String[] | String>;
  productNum_not_in?: Maybe<String[] | String>;
  productNum_lt?: Maybe<String>;
  productNum_lte?: Maybe<String>;
  productNum_gt?: Maybe<String>;
  productNum_gte?: Maybe<String>;
  productNum_contains?: Maybe<String>;
  productNum_not_contains?: Maybe<String>;
  productNum_starts_with?: Maybe<String>;
  productNum_not_starts_with?: Maybe<String>;
  productNum_ends_with?: Maybe<String>;
  productNum_not_ends_with?: Maybe<String>;
  productCost?: Maybe<Int>;
  productCost_not?: Maybe<Int>;
  productCost_in?: Maybe<Int[] | Int>;
  productCost_not_in?: Maybe<Int[] | Int>;
  productCost_lt?: Maybe<Int>;
  productCost_lte?: Maybe<Int>;
  productCost_gt?: Maybe<Int>;
  productCost_gte?: Maybe<Int>;
  payPerson?: Maybe<PayPersonWhereInput>;
  user?: Maybe<UserWhereInput>;
  admin?: Maybe<AdminWhereInput>;
  isDeliver?: Maybe<Boolean>;
  isDeliver_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<DealWhereInput[] | DealWhereInput>;
  OR?: Maybe<DealWhereInput[] | DealWhereInput>;
  NOT?: Maybe<DealWhereInput[] | DealWhereInput>;
}

export interface ProductUpsertNestedInput {
  update: ProductUpdateDataInput;
  create: ProductCreateInput;
}

export interface PayPersonWhereInput {
  ID?: Maybe<ID_Input>;
  ID_not?: Maybe<ID_Input>;
  ID_in?: Maybe<ID_Input[] | ID_Input>;
  ID_not_in?: Maybe<ID_Input[] | ID_Input>;
  ID_lt?: Maybe<ID_Input>;
  ID_lte?: Maybe<ID_Input>;
  ID_gt?: Maybe<ID_Input>;
  ID_gte?: Maybe<ID_Input>;
  ID_contains?: Maybe<ID_Input>;
  ID_not_contains?: Maybe<ID_Input>;
  ID_starts_with?: Maybe<ID_Input>;
  ID_not_starts_with?: Maybe<ID_Input>;
  ID_ends_with?: Maybe<ID_Input>;
  ID_not_ends_with?: Maybe<ID_Input>;
  bank?: Maybe<String>;
  bank_not?: Maybe<String>;
  bank_in?: Maybe<String[] | String>;
  bank_not_in?: Maybe<String[] | String>;
  bank_lt?: Maybe<String>;
  bank_lte?: Maybe<String>;
  bank_gt?: Maybe<String>;
  bank_gte?: Maybe<String>;
  bank_contains?: Maybe<String>;
  bank_not_contains?: Maybe<String>;
  bank_starts_with?: Maybe<String>;
  bank_not_starts_with?: Maybe<String>;
  bank_ends_with?: Maybe<String>;
  bank_not_ends_with?: Maybe<String>;
  payPerson?: Maybe<String>;
  payPerson_not?: Maybe<String>;
  payPerson_in?: Maybe<String[] | String>;
  payPerson_not_in?: Maybe<String[] | String>;
  payPerson_lt?: Maybe<String>;
  payPerson_lte?: Maybe<String>;
  payPerson_gt?: Maybe<String>;
  payPerson_gte?: Maybe<String>;
  payPerson_contains?: Maybe<String>;
  payPerson_not_contains?: Maybe<String>;
  payPerson_starts_with?: Maybe<String>;
  payPerson_not_starts_with?: Maybe<String>;
  payPerson_ends_with?: Maybe<String>;
  payPerson_not_ends_with?: Maybe<String>;
  isAllPay?: Maybe<Boolean>;
  isAllPay_not?: Maybe<Boolean>;
  AND?: Maybe<PayPersonWhereInput[] | PayPersonWhereInput>;
  OR?: Maybe<PayPersonWhereInput[] | PayPersonWhereInput>;
  NOT?: Maybe<PayPersonWhereInput[] | PayPersonWhereInput>;
}

export interface ProductUpdateDataInput {
  productName?: Maybe<String>;
  productLotNumber?: Maybe<String>;
  isNow?: Maybe<Boolean>;
}

export interface PayPersonSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PayPersonWhereInput>;
  AND?: Maybe<
    PayPersonSubscriptionWhereInput[] | PayPersonSubscriptionWhereInput
  >;
  OR?: Maybe<
    PayPersonSubscriptionWhereInput[] | PayPersonSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PayPersonSubscriptionWhereInput[] | PayPersonSubscriptionWhereInput
  >;
}

export interface ProductUpdateOneRequiredInput {
  create?: Maybe<ProductCreateInput>;
  update?: Maybe<ProductUpdateDataInput>;
  upsert?: Maybe<ProductUpsertNestedInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface AdminUpdateDataInput {
  name?: Maybe<String>;
  password?: Maybe<String>;
}

export type PayPersonWhereUniqueInput = AtLeastOne<{
  ID: Maybe<ID_Input>;
}>;

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface AdminCreateInput {
  ID?: Maybe<ID_Input>;
  name: String;
  password: String;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface AdminUpdateInput {
  name?: Maybe<String>;
  password?: Maybe<String>;
}

export interface UserUpdateInput {
  userName?: Maybe<String>;
  userPhonNumber?: Maybe<String>;
}

export interface AdminUpdateManyMutationInput {
  name?: Maybe<String>;
  password?: Maybe<String>;
}

export interface PayPersonUpdateManyMutationInput {
  bank?: Maybe<String>;
  payPerson?: Maybe<String>;
  isAllPay?: Maybe<Boolean>;
}

export interface DealUpdateInput {
  address?: Maybe<String>;
  product?: Maybe<ProductUpdateOneRequiredInput>;
  productNum?: Maybe<String>;
  productCost?: Maybe<Int>;
  payPerson?: Maybe<PayPersonUpdateOneRequiredInput>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  admin?: Maybe<AdminUpdateOneRequiredInput>;
  isDeliver?: Maybe<Boolean>;
}

export interface ProductWhereInput {
  ID?: Maybe<ID_Input>;
  ID_not?: Maybe<ID_Input>;
  ID_in?: Maybe<ID_Input[] | ID_Input>;
  ID_not_in?: Maybe<ID_Input[] | ID_Input>;
  ID_lt?: Maybe<ID_Input>;
  ID_lte?: Maybe<ID_Input>;
  ID_gt?: Maybe<ID_Input>;
  ID_gte?: Maybe<ID_Input>;
  ID_contains?: Maybe<ID_Input>;
  ID_not_contains?: Maybe<ID_Input>;
  ID_starts_with?: Maybe<ID_Input>;
  ID_not_starts_with?: Maybe<ID_Input>;
  ID_ends_with?: Maybe<ID_Input>;
  ID_not_ends_with?: Maybe<ID_Input>;
  productName?: Maybe<String>;
  productName_not?: Maybe<String>;
  productName_in?: Maybe<String[] | String>;
  productName_not_in?: Maybe<String[] | String>;
  productName_lt?: Maybe<String>;
  productName_lte?: Maybe<String>;
  productName_gt?: Maybe<String>;
  productName_gte?: Maybe<String>;
  productName_contains?: Maybe<String>;
  productName_not_contains?: Maybe<String>;
  productName_starts_with?: Maybe<String>;
  productName_not_starts_with?: Maybe<String>;
  productName_ends_with?: Maybe<String>;
  productName_not_ends_with?: Maybe<String>;
  productLotNumber?: Maybe<String>;
  productLotNumber_not?: Maybe<String>;
  productLotNumber_in?: Maybe<String[] | String>;
  productLotNumber_not_in?: Maybe<String[] | String>;
  productLotNumber_lt?: Maybe<String>;
  productLotNumber_lte?: Maybe<String>;
  productLotNumber_gt?: Maybe<String>;
  productLotNumber_gte?: Maybe<String>;
  productLotNumber_contains?: Maybe<String>;
  productLotNumber_not_contains?: Maybe<String>;
  productLotNumber_starts_with?: Maybe<String>;
  productLotNumber_not_starts_with?: Maybe<String>;
  productLotNumber_ends_with?: Maybe<String>;
  productLotNumber_not_ends_with?: Maybe<String>;
  isNow?: Maybe<Boolean>;
  isNow_not?: Maybe<Boolean>;
  AND?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  OR?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  NOT?: Maybe<ProductWhereInput[] | ProductWhereInput>;
}

export interface AdminCreateOneInput {
  create?: Maybe<AdminCreateInput>;
  connect?: Maybe<AdminWhereUniqueInput>;
}

export interface AdminUpsertNestedInput {
  update: AdminUpdateDataInput;
  create: AdminCreateInput;
}

export interface DealCreateInput {
  ID?: Maybe<ID_Input>;
  address: String;
  product: ProductCreateOneInput;
  productNum: String;
  productCost: Int;
  payPerson: PayPersonCreateOneInput;
  user: UserCreateOneInput;
  admin: AdminCreateOneInput;
  isDeliver?: Maybe<Boolean>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface ProductCreateOneInput {
  create?: Maybe<ProductCreateInput>;
  connect?: Maybe<ProductWhereUniqueInput>;
}

export interface AdminSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AdminWhereInput>;
  AND?: Maybe<AdminSubscriptionWhereInput[] | AdminSubscriptionWhereInput>;
  OR?: Maybe<AdminSubscriptionWhereInput[] | AdminSubscriptionWhereInput>;
  NOT?: Maybe<AdminSubscriptionWhereInput[] | AdminSubscriptionWhereInput>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PayPersonCreateInput {
  ID?: Maybe<ID_Input>;
  bank: String;
  payPerson: String;
  isAllPay?: Maybe<Boolean>;
}

export interface PayPersonCreateOneInput {
  create?: Maybe<PayPersonCreateInput>;
  connect?: Maybe<PayPersonWhereUniqueInput>;
}

export interface ProductCreateInput {
  ID?: Maybe<ID_Input>;
  productName: String;
  productLotNumber: String;
  isNow?: Maybe<Boolean>;
}

export interface ProductUpdateManyMutationInput {
  productName?: Maybe<String>;
  productLotNumber?: Maybe<String>;
  isNow?: Maybe<Boolean>;
}

export interface UserUpdateDataInput {
  userName?: Maybe<String>;
  userPhonNumber?: Maybe<String>;
}

export interface AdminUpdateOneRequiredInput {
  create?: Maybe<AdminCreateInput>;
  update?: Maybe<AdminUpdateDataInput>;
  upsert?: Maybe<AdminUpsertNestedInput>;
  connect?: Maybe<AdminWhereUniqueInput>;
}

export interface UserWhereInput {
  ID?: Maybe<ID_Input>;
  ID_not?: Maybe<ID_Input>;
  ID_in?: Maybe<ID_Input[] | ID_Input>;
  ID_not_in?: Maybe<ID_Input[] | ID_Input>;
  ID_lt?: Maybe<ID_Input>;
  ID_lte?: Maybe<ID_Input>;
  ID_gt?: Maybe<ID_Input>;
  ID_gte?: Maybe<ID_Input>;
  ID_contains?: Maybe<ID_Input>;
  ID_not_contains?: Maybe<ID_Input>;
  ID_starts_with?: Maybe<ID_Input>;
  ID_not_starts_with?: Maybe<ID_Input>;
  ID_ends_with?: Maybe<ID_Input>;
  ID_not_ends_with?: Maybe<ID_Input>;
  userName?: Maybe<String>;
  userName_not?: Maybe<String>;
  userName_in?: Maybe<String[] | String>;
  userName_not_in?: Maybe<String[] | String>;
  userName_lt?: Maybe<String>;
  userName_lte?: Maybe<String>;
  userName_gt?: Maybe<String>;
  userName_gte?: Maybe<String>;
  userName_contains?: Maybe<String>;
  userName_not_contains?: Maybe<String>;
  userName_starts_with?: Maybe<String>;
  userName_not_starts_with?: Maybe<String>;
  userName_ends_with?: Maybe<String>;
  userName_not_ends_with?: Maybe<String>;
  userPhonNumber?: Maybe<String>;
  userPhonNumber_not?: Maybe<String>;
  userPhonNumber_in?: Maybe<String[] | String>;
  userPhonNumber_not_in?: Maybe<String[] | String>;
  userPhonNumber_lt?: Maybe<String>;
  userPhonNumber_lte?: Maybe<String>;
  userPhonNumber_gt?: Maybe<String>;
  userPhonNumber_gte?: Maybe<String>;
  userPhonNumber_contains?: Maybe<String>;
  userPhonNumber_not_contains?: Maybe<String>;
  userPhonNumber_starts_with?: Maybe<String>;
  userPhonNumber_not_starts_with?: Maybe<String>;
  userPhonNumber_ends_with?: Maybe<String>;
  userPhonNumber_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface DealUpdateManyMutationInput {
  address?: Maybe<String>;
  productNum?: Maybe<String>;
  productCost?: Maybe<Int>;
  isDeliver?: Maybe<Boolean>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Deal {
  ID: ID_Output;
  address: String;
  productNum: String;
  productCost: Int;
  isDeliver?: Boolean;
  createdAt?: DateTimeOutput;
}

export interface DealPromise extends Promise<Deal>, Fragmentable {
  ID: () => Promise<ID_Output>;
  address: () => Promise<String>;
  product: <T = ProductPromise>() => T;
  productNum: () => Promise<String>;
  productCost: () => Promise<Int>;
  payPerson: <T = PayPersonPromise>() => T;
  user: <T = UserPromise>() => T;
  admin: <T = AdminPromise>() => T;
  isDeliver: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface DealSubscription
  extends Promise<AsyncIterator<Deal>>,
    Fragmentable {
  ID: () => Promise<AsyncIterator<ID_Output>>;
  address: () => Promise<AsyncIterator<String>>;
  product: <T = ProductSubscription>() => T;
  productNum: () => Promise<AsyncIterator<String>>;
  productCost: () => Promise<AsyncIterator<Int>>;
  payPerson: <T = PayPersonSubscription>() => T;
  user: <T = UserSubscription>() => T;
  admin: <T = AdminSubscription>() => T;
  isDeliver: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface DealNullablePromise
  extends Promise<Deal | null>,
    Fragmentable {
  ID: () => Promise<ID_Output>;
  address: () => Promise<String>;
  product: <T = ProductPromise>() => T;
  productNum: () => Promise<String>;
  productCost: () => Promise<Int>;
  payPerson: <T = PayPersonPromise>() => T;
  user: <T = UserPromise>() => T;
  admin: <T = AdminPromise>() => T;
  isDeliver: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValues {
  ID: ID_Output;
  userName: String;
  userPhonNumber: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  ID: () => Promise<ID_Output>;
  userName: () => Promise<String>;
  userPhonNumber: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  ID: () => Promise<AsyncIterator<ID_Output>>;
  userName: () => Promise<AsyncIterator<String>>;
  userPhonNumber: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAdmin {
  count: Int;
}

export interface AggregateAdminPromise
  extends Promise<AggregateAdmin>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAdminSubscription
  extends Promise<AsyncIterator<AggregateAdmin>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AdminEdge {
  node: Admin;
  cursor: String;
}

export interface AdminEdgePromise extends Promise<AdminEdge>, Fragmentable {
  node: <T = AdminPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AdminEdgeSubscription
  extends Promise<AsyncIterator<AdminEdge>>,
    Fragmentable {
  node: <T = AdminSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface PayPersonEdge {
  node: PayPerson;
  cursor: String;
}

export interface PayPersonEdgePromise
  extends Promise<PayPersonEdge>,
    Fragmentable {
  node: <T = PayPersonPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PayPersonEdgeSubscription
  extends Promise<AsyncIterator<PayPersonEdge>>,
    Fragmentable {
  node: <T = PayPersonSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDeal {
  count: Int;
}

export interface AggregateDealPromise
  extends Promise<AggregateDeal>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDealSubscription
  extends Promise<AsyncIterator<AggregateDeal>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AdminSubscriptionPayload {
  mutation: MutationType;
  node: Admin;
  updatedFields: String[];
  previousValues: AdminPreviousValues;
}

export interface AdminSubscriptionPayloadPromise
  extends Promise<AdminSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AdminPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AdminPreviousValuesPromise>() => T;
}

export interface AdminSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AdminSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AdminSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AdminPreviousValuesSubscription>() => T;
}

export interface DealConnection {
  pageInfo: PageInfo;
  edges: DealEdge[];
}

export interface DealConnectionPromise
  extends Promise<DealConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DealEdge>>() => T;
  aggregate: <T = AggregateDealPromise>() => T;
}

export interface DealConnectionSubscription
  extends Promise<AsyncIterator<DealConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DealEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDealSubscription>() => T;
}

export interface AdminPreviousValues {
  ID: ID_Output;
  name: String;
  password: String;
}

export interface AdminPreviousValuesPromise
  extends Promise<AdminPreviousValues>,
    Fragmentable {
  ID: () => Promise<ID_Output>;
  name: () => Promise<String>;
  password: () => Promise<String>;
}

export interface AdminPreviousValuesSubscription
  extends Promise<AsyncIterator<AdminPreviousValues>>,
    Fragmentable {
  ID: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface User {
  ID: ID_Output;
  userName: String;
  userPhonNumber: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  ID: () => Promise<ID_Output>;
  userName: () => Promise<String>;
  userPhonNumber: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  ID: () => Promise<AsyncIterator<ID_Output>>;
  userName: () => Promise<AsyncIterator<String>>;
  userPhonNumber: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  ID: () => Promise<ID_Output>;
  userName: () => Promise<String>;
  userPhonNumber: () => Promise<String>;
}

export interface AdminConnection {
  pageInfo: PageInfo;
  edges: AdminEdge[];
}

export interface AdminConnectionPromise
  extends Promise<AdminConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AdminEdge>>() => T;
  aggregate: <T = AggregateAdminPromise>() => T;
}

export interface AdminConnectionSubscription
  extends Promise<AsyncIterator<AdminConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AdminEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAdminSubscription>() => T;
}

export interface Product {
  ID: ID_Output;
  productName: String;
  productLotNumber: String;
  isNow?: Boolean;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  ID: () => Promise<ID_Output>;
  productName: () => Promise<String>;
  productLotNumber: () => Promise<String>;
  isNow: () => Promise<Boolean>;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  ID: () => Promise<AsyncIterator<ID_Output>>;
  productName: () => Promise<AsyncIterator<String>>;
  productLotNumber: () => Promise<AsyncIterator<String>>;
  isNow: () => Promise<AsyncIterator<Boolean>>;
}

export interface ProductNullablePromise
  extends Promise<Product | null>,
    Fragmentable {
  ID: () => Promise<ID_Output>;
  productName: () => Promise<String>;
  productLotNumber: () => Promise<String>;
  isNow: () => Promise<Boolean>;
}

export interface DealSubscriptionPayload {
  mutation: MutationType;
  node: Deal;
  updatedFields: String[];
  previousValues: DealPreviousValues;
}

export interface DealSubscriptionPayloadPromise
  extends Promise<DealSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DealPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DealPreviousValuesPromise>() => T;
}

export interface DealSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DealSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DealSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DealPreviousValuesSubscription>() => T;
}

export interface AggregatePayPerson {
  count: Int;
}

export interface AggregatePayPersonPromise
  extends Promise<AggregatePayPerson>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePayPersonSubscription
  extends Promise<AsyncIterator<AggregatePayPerson>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DealEdge {
  node: Deal;
  cursor: String;
}

export interface DealEdgePromise extends Promise<DealEdge>, Fragmentable {
  node: <T = DealPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DealEdgeSubscription
  extends Promise<AsyncIterator<DealEdge>>,
    Fragmentable {
  node: <T = DealSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PayPersonPreviousValues {
  ID: ID_Output;
  bank: String;
  payPerson: String;
  isAllPay: Boolean;
}

export interface PayPersonPreviousValuesPromise
  extends Promise<PayPersonPreviousValues>,
    Fragmentable {
  ID: () => Promise<ID_Output>;
  bank: () => Promise<String>;
  payPerson: () => Promise<String>;
  isAllPay: () => Promise<Boolean>;
}

export interface PayPersonPreviousValuesSubscription
  extends Promise<AsyncIterator<PayPersonPreviousValues>>,
    Fragmentable {
  ID: () => Promise<AsyncIterator<ID_Output>>;
  bank: () => Promise<AsyncIterator<String>>;
  payPerson: () => Promise<AsyncIterator<String>>;
  isAllPay: () => Promise<AsyncIterator<Boolean>>;
}

export interface PayPersonSubscriptionPayload {
  mutation: MutationType;
  node: PayPerson;
  updatedFields: String[];
  previousValues: PayPersonPreviousValues;
}

export interface PayPersonSubscriptionPayloadPromise
  extends Promise<PayPersonSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PayPersonPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PayPersonPreviousValuesPromise>() => T;
}

export interface PayPersonSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PayPersonSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PayPersonSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PayPersonPreviousValuesSubscription>() => T;
}

export interface ProductPreviousValues {
  ID: ID_Output;
  productName: String;
  productLotNumber: String;
  isNow?: Boolean;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  ID: () => Promise<ID_Output>;
  productName: () => Promise<String>;
  productLotNumber: () => Promise<String>;
  isNow: () => Promise<Boolean>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  ID: () => Promise<AsyncIterator<ID_Output>>;
  productName: () => Promise<AsyncIterator<String>>;
  productLotNumber: () => Promise<AsyncIterator<String>>;
  isNow: () => Promise<AsyncIterator<Boolean>>;
}

export interface DealPreviousValues {
  ID: ID_Output;
  address: String;
  productNum: String;
  productCost: Int;
  isDeliver?: Boolean;
  createdAt?: DateTimeOutput;
}

export interface DealPreviousValuesPromise
  extends Promise<DealPreviousValues>,
    Fragmentable {
  ID: () => Promise<ID_Output>;
  address: () => Promise<String>;
  productNum: () => Promise<String>;
  productCost: () => Promise<Int>;
  isDeliver: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface DealPreviousValuesSubscription
  extends Promise<AsyncIterator<DealPreviousValues>>,
    Fragmentable {
  ID: () => Promise<AsyncIterator<ID_Output>>;
  address: () => Promise<AsyncIterator<String>>;
  productNum: () => Promise<AsyncIterator<String>>;
  productCost: () => Promise<AsyncIterator<Int>>;
  isDeliver: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface PayPersonConnection {
  pageInfo: PageInfo;
  edges: PayPersonEdge[];
}

export interface PayPersonConnectionPromise
  extends Promise<PayPersonConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PayPersonEdge>>() => T;
  aggregate: <T = AggregatePayPersonPromise>() => T;
}

export interface PayPersonConnectionSubscription
  extends Promise<AsyncIterator<PayPersonConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PayPersonEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePayPersonSubscription>() => T;
}

export interface Admin {
  ID: ID_Output;
  name: String;
  password: String;
}

export interface AdminPromise extends Promise<Admin>, Fragmentable {
  ID: () => Promise<ID_Output>;
  name: () => Promise<String>;
  password: () => Promise<String>;
}

export interface AdminSubscription
  extends Promise<AsyncIterator<Admin>>,
    Fragmentable {
  ID: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

export interface AdminNullablePromise
  extends Promise<Admin | null>,
    Fragmentable {
  ID: () => Promise<ID_Output>;
  name: () => Promise<String>;
  password: () => Promise<String>;
}

export interface PayPerson {
  ID: ID_Output;
  bank: String;
  payPerson: String;
  isAllPay: Boolean;
}

export interface PayPersonPromise extends Promise<PayPerson>, Fragmentable {
  ID: () => Promise<ID_Output>;
  bank: () => Promise<String>;
  payPerson: () => Promise<String>;
  isAllPay: () => Promise<Boolean>;
}

export interface PayPersonSubscription
  extends Promise<AsyncIterator<PayPerson>>,
    Fragmentable {
  ID: () => Promise<AsyncIterator<ID_Output>>;
  bank: () => Promise<AsyncIterator<String>>;
  payPerson: () => Promise<AsyncIterator<String>>;
  isAllPay: () => Promise<AsyncIterator<Boolean>>;
}

export interface PayPersonNullablePromise
  extends Promise<PayPerson | null>,
    Fragmentable {
  ID: () => Promise<ID_Output>;
  bank: () => Promise<String>;
  payPerson: () => Promise<String>;
  isAllPay: () => Promise<Boolean>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Deal",
    embedded: false
  },
  {
    name: "Admin",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "PayPerson",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
